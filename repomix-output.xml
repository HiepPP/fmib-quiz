This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  components/
    admin/
      QuestionForm.tsx
      QuestionList.tsx
    layout/
      Footer.tsx
      Header.tsx
      Layout.tsx
    quiz/
      EnhancedQuizTimer.tsx
      QuestionDisplay.tsx
      QuizCertificate.tsx
      QuizResults.tsx
      QuizTimer.tsx
      UserInfoForm.tsx
    ui/
      Alert.tsx
      AnimatedLoading.tsx
      Button.tsx
      Card.tsx
      Container.tsx
      LoadingSpinner.tsx
      Progress.tsx
  lib/
    api.ts
    blob-debug.ts
    blob-storage.ts
    dev-storage.ts
    quizService.ts
    storage.ts
    utils.ts
  pages/
    api/
      quiz/
        questions.ts
        submit.ts
      blob-questions.ts
      debug-blob.ts
      hello.ts
    _app.tsx
    _document.tsx
    admin-debug.tsx
    admin.tsx
    certificate.tsx
    debug-blob.tsx
    index.tsx
    quiz.tsx
  styles/
    globals.css
  types/
    quiz.ts
.eslintrc.json
.gitignore
.prettierrc
BLOB_STORAGE_SETUP.md
CLAUDE.md
eslint.config.mjs
next.config.ts
package.json
planning.md
postcss.config.mjs
README.md
tasks.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/components/admin/QuestionForm.tsx">
import { useState } from 'react'
import { Question } from '@/types/quiz'

interface QuestionFormProps {
  question?: Question
  onSave: (question: Question) => void
  onCancel: () => void
}

export default function QuestionForm({ question, onSave, onCancel }: QuestionFormProps) {
  const [formData, setFormData] = useState({
    question: question?.question || '',
    answers: question?.answers || [
      { id: '1', text: '', isCorrect: false },
      { id: '2', text: '', isCorrect: false },
      { id: '3', text: '', isCorrect: false },
      { id: '4', text: '', isCorrect: false }
    ]
  })

  const handleQuestionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setFormData({ ...formData, question: e.target.value })
  }

  const handleAnswerChange = (answerId: string, field: 'text' | 'isCorrect', value: string | boolean) => {
    setFormData({
      ...formData,
      answers: formData.answers.map(answer =>
        answer.id === answerId
          ? { ...answer, [field]: value }
          : field === 'isCorrect' && value === true
            ? { ...answer, isCorrect: false }
            : answer
      )
    })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    // Validation
    if (!formData.question.trim()) {
      alert('Please enter a question')
      return
    }

    const validAnswers = formData.answers.filter(answer => answer.text.trim())
    if (validAnswers.length < 2) {
      alert('Please provide at least 2 answers')
      return
    }

    const hasCorrectAnswer = validAnswers.some(answer => answer.isCorrect)
    if (!hasCorrectAnswer) {
      alert('Please mark at least one answer as correct')
      return
    }

    const newQuestion: Question = {
      id: question?.id || Date.now().toString(),
      question: formData.question.trim(),
      answers: validAnswers
    }

    onSave(newQuestion)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label htmlFor="question" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Question *
        </label>
        <textarea
          id="question"
          rows={3}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          value={formData.question}
          onChange={handleQuestionChange}
          placeholder="Enter your question here..."
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Answers *
        </label>
        <div className="space-y-3">
          {formData.answers.map((answer, index) => (
            <div key={answer.id} className="flex items-center space-x-3 p-3 border border-gray-200 dark:border-gray-600 rounded-lg">
              <span className="text-sm font-medium text-gray-500 dark:text-gray-400 w-8">
                {String.fromCharCode(65 + index)}.
              </span>

              <input
                type="text"
                className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
                value={answer.text}
                onChange={(e) => handleAnswerChange(answer.id, 'text', e.target.value)}
                placeholder={`Answer ${index + 1}`}
              />

              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="correctAnswer"
                  checked={answer.isCorrect}
                  onChange={() => handleAnswerChange(answer.id, 'isCorrect', true)}
                  className="w-4 h-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                />
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Correct
                </span>
              </label>
            </div>
          ))}
        </div>
        <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">
          Mark at least one answer as correct. You can have multiple correct answers.
        </p>
      </div>

      <div className="flex space-x-3">
        <button
          type="submit"
          className="px-4 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors"
        >
          {question ? 'Update Question' : 'Add Question'}
        </button>
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 bg-gray-600 text-white font-medium rounded-md hover:bg-gray-700 transition-colors"
        >
          Cancel
        </button>
      </div>
    </form>
  )
}
</file>

<file path="src/components/admin/QuestionList.tsx">
import { Question } from '@/types/quiz'

interface QuestionListProps {
  questions: Question[]
  onEdit: (question: Question) => void
  onDelete: (questionId: string) => void
}

export default function QuestionList({ questions, onEdit, onDelete }: QuestionListProps) {
  if (questions.length === 0) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600 dark:text-gray-400 mb-4">
          No questions added yet.
        </p>
        <p className="text-sm text-gray-500 dark:text-gray-500">
          Start by adding your first question to create the quiz.
        </p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {questions.map((question, questionIndex) => (
        <div
          key={question.id}
          className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 shadow-sm"
        >
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center space-x-3 mb-3">
                <span className="inline-flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm font-medium">
                  {questionIndex + 1}
                </span>
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                  {question.question}
                </h3>
              </div>

              <div className="ml-11 space-y-2">
                {question.answers.map((answer, index) => (
                  <div
                    key={answer.id}
                    className={`flex items-center space-x-3 p-2 rounded-md ${
                      answer.isCorrect
                        ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800'
                        : 'bg-gray-50 dark:bg-gray-700/30 border border-gray-200 dark:border-gray-600'
                    }`}
                  >
                    <span className="text-sm font-medium text-gray-600 dark:text-gray-400 w-6">
                      {String.fromCharCode(65 + index)}.
                    </span>
                    <span className={`text-sm ${
                      answer.isCorrect
                        ? 'text-green-800 dark:text-green-200 font-medium'
                        : 'text-gray-700 dark:text-gray-300'
                    }`}>
                      {answer.text}
                      {answer.isCorrect && (
                        <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200">
                          Correct
                        </span>
                      )}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex space-x-2 ml-4">
              <button
                onClick={() => onEdit(question)}
                className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md transition-colors"
                title="Edit question"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </button>
              <button
                onClick={() => onDelete(question.id)}
                className="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition-colors"
                title="Delete question"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
</file>

<file path="src/components/layout/Layout.tsx">
import { ReactNode } from 'react'
import Header from './Header'
import Footer from './Footer'

interface LayoutProps {
  children: ReactNode
  title?: string
  showHeader?: boolean
  showFooter?: boolean
}

export default function Layout({
  children,
  title,
  showHeader = true,
  showFooter = true
}: LayoutProps) {
  return (
    <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
      {showHeader && <Header title={title} />}

      <main className="flex-1">
        {children}
      </main>

      {showFooter && <Footer />}
    </div>
  )
}
</file>

<file path="src/components/quiz/EnhancedQuizTimer.tsx">
import { useState, useEffect, useCallback } from 'react'
import { getRemainingTime, isSessionExpired } from '@/lib/storage'

interface EnhancedQuizTimerProps {
  startTime: number
  onTimeExpire: () => void
  onTick?: (remainingTime: number) => void
  isPaused?: boolean
  className?: string
}

export default function EnhancedQuizTimer({
  startTime,
  onTimeExpire,
  onTick,
  isPaused = false,
  className = ""
}: EnhancedQuizTimerProps) {
  const [remainingTime, setRemainingTime] = useState(() => getRemainingTime(startTime))
  const [isExpired, setIsExpired] = useState(false)
  const [isWarning, setIsWarning] = useState(false)

  useEffect(() => {
    // Check if already expired
    if (isSessionExpired(startTime)) {
      setIsExpired(true)
      onTimeExpire()
      return
    }

    const interval = setInterval(() => {
      if (!isPaused) {
        const newRemainingTime = getRemainingTime(startTime)
        setRemainingTime(newRemainingTime)

        // Set warning state when less than 2 minutes
        setIsWarning(newRemainingTime <= 120)

        if (onTick) {
          onTick(newRemainingTime)
        }

        if (newRemainingTime <= 0) {
          setIsExpired(true)
          setIsWarning(false)
          clearInterval(interval)
          onTimeExpire()
        }
      }
    }, 1000) // Update every second

    return () => clearInterval(interval)
  }, [startTime, onTimeExpire, onTick, isPaused])

  const formatTime = useCallback((seconds: number): string => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }, [])

  const getTimerStyles = useCallback(() => {
    if (remainingTime <= 30) {
      return {
        bgColor: 'bg-red-100 dark:bg-red-900/30',
        borderColor: 'border-red-300 dark:border-red-700',
        textColor: 'text-red-700 dark:text-red-300',
        iconColor: 'text-red-600 dark:text-red-400',
        pulseAnimation: true
      }
    } else if (remainingTime <= 120) {
      return {
        bgColor: 'bg-yellow-100 dark:bg-yellow-900/30',
        borderColor: 'border-yellow-300 dark:border-yellow-700',
        textColor: 'text-yellow-700 dark:text-yellow-300',
        iconColor: 'text-yellow-600 dark:text-yellow-400',
        pulseAnimation: false
      }
    } else {
      return {
        bgColor: 'bg-green-100 dark:bg-green-900/30',
        borderColor: 'border-green-300 dark:border-green-700',
        textColor: 'text-green-700 dark:text-green-300',
        iconColor: 'text-green-600 dark:text-green-400',
        pulseAnimation: false
      }
    }
  }, [remainingTime])

  const getTimePercentage = useCallback(() => {
    const totalTime = 10 * 60 // 10 minutes in seconds
    return (remainingTime / totalTime) * 100
  }, [remainingTime])

  if (isExpired) {
    return null
  }

  const styles = getTimerStyles()

  return (
    <div className={`w-full max-w-md mx-auto ${className}`}>
      {/* Main Timer Display */}
      <div className={`${styles.bgColor} ${styles.borderColor} border-2 rounded-xl p-4 shadow-lg transition-all duration-300`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className={`relative ${styles.pulseAnimation ? 'animate-pulse' : ''}`}>
              <svg
                className={`w-6 h-6 ${styles.iconColor} ${isPaused ? 'animate-spin-slow' : ''}`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                {isPaused ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                )}
              </svg>
              {isWarning && !isPaused && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-ping"></div>
              )}
            </div>
            <div>
              <div className={`text-2xl font-bold ${styles.textColor} font-mono`}>
                {formatTime(remainingTime)}
              </div>
              <div className={`text-xs ${styles.textColor} opacity-75`}>
                {remainingTime <= 30 ? 'Time almost up!' : remainingTime <= 120 ? 'Hurry up!' : 'Time remaining'}
              </div>
            </div>
          </div>

          <div className="text-right">
            <div className={`text-sm font-medium ${styles.textColor}`}>
              {Math.ceil(remainingTime / 60)} min
            </div>
            <div className={`text-xs ${styles.textColor} opacity-75`}>
              {Math.floor((remainingTime % 60))} sec
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="mt-3">
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 overflow-hidden">
            <div
              className={`h-full transition-all duration-1000 ease-out ${
                remainingTime <= 30
                  ? 'bg-red-500'
                  : remainingTime <= 120
                    ? 'bg-yellow-500'
                    : 'bg-green-500'
              }`}
              style={{ width: `${getTimePercentage()}%` }}
            ></div>
          </div>
        </div>
      </div>

      {/* Warning Messages */}
      {remainingTime <= 60 && remainingTime > 0 && (
        <div className="mt-3 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg animate-pulse">
          <div className="flex items-center space-x-2">
            <svg className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
            <p className="text-red-800 dark:text-red-200 text-sm font-medium">
              {remainingTime <= 10
                ? `Quiz will auto-submit in ${remainingTime} seconds!`
                : 'Less than 1 minute remaining! Complete your answers quickly.'
              }
            </p>
          </div>
        </div>
      )}
    </div>
  )
}
</file>

<file path="src/components/quiz/QuizResults.tsx">
import { UserInfo, QuizResult } from '@/types/quiz'

interface QuizResultsProps {
  userInfo: UserInfo | null
  quizResult: QuizResult | null
  submitError: string | null
  isTimerExpired: boolean
  onRestartQuiz: () => void
  onGoHome: () => void
}

export default function QuizResults({
  userInfo,
  quizResult,
  submitError,
  isTimerExpired,
  onRestartQuiz,
  onGoHome
}: QuizResultsProps) {
  // Helper functions for performance feedback
  const getPerformanceMessage = (percentage: number): string => {
    if (percentage >= 90) return 'Outstanding Performance! 🎉'
    if (percentage >= 80) return 'Excellent Work! 🌟'
    if (percentage >= 70) return 'Good Job! 👍'
    if (percentage >= 60) return 'Nice Effort! 💪'
    if (percentage >= 50) return 'Keep Practicing! 📚'
    return 'Room for Improvement! 🎯'
  }

  const getPerformanceAdvice = (percentage: number): string => {
    if (percentage >= 80) return 'You have mastered this material!'
    if (percentage >= 70) return 'You have a good understanding of the material.'
    if (percentage >= 60) return 'Review the areas where you struggled.'
    if (percentage >= 50) return 'Consider spending more time studying.'
    return 'Don\'t give up! Practice makes perfect.'
  }

  const getScoreColor = (percentage: number): string => {
    if (percentage >= 80) return 'text-green-600 dark:text-green-400'
    if (percentage >= 60) return 'text-blue-600 dark:text-blue-400'
    if (percentage >= 40) return 'text-yellow-600 dark:text-yellow-400'
    return 'text-red-600 dark:text-red-400'
  }

  const formatTime = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const percentage = quizResult?.summary?.percentage || 0
  const scoreColor = getScoreColor(percentage)

  return (
    <div className="max-w-4xl mx-auto w-full">
      {/* Status Banner */}
      <div className={`rounded-lg border-2 p-6 mb-6 text-center ${
        submitError
          ? 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800'
          : isTimerExpired
            ? 'bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800'
            : 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800'
      }`}>
        <div className="flex items-center justify-center space-x-3 mb-2">
          {submitError ? (
            <svg className="w-8 h-8 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          ) : isTimerExpired ? (
            <svg className="w-8 h-8 text-orange-600 dark:text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          ) : (
            <svg className="w-8 h-8 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          )}
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
            {submitError ? 'Quiz Completed (with errors)' :
             isTimerExpired ? 'Time Expired!' : 'Quiz Completed!'}
          </h2>
        </div>
        <p className="text-gray-600 dark:text-gray-400 max-w-md mx-auto">
          {submitError
            ? 'Your quiz was completed but there was an error submitting to the server.'
            : isTimerExpired
              ? 'Your quiz was automatically submitted when the time ran out.'
              : 'Your quiz has been successfully submitted!'
          }
        </p>
      </div>

      {/* Main Results Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Score Card */}
        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 text-center">
              Final Score
            </h3>

            {/* Circular Score Display */}
            <div className="flex justify-center mb-6">
              <div className="relative w-32 h-32">
                <svg className="w-32 h-32 transform -rotate-90">
                  <circle
                    cx="64"
                    cy="64"
                    r="56"
                    stroke="currentColor"
                    strokeWidth="12"
                    fill="none"
                    className="text-gray-200 dark:text-gray-700"
                  />
                  <circle
                    cx="64"
                    cy="64"
                    r="56"
                    stroke="currentColor"
                    strokeWidth="12"
                    fill="none"
                    strokeDasharray={`${2 * Math.PI * 56}`}
                    strokeDashoffset={`${2 * Math.PI * 56 * (1 - percentage / 100)}`}
                    className={scoreColor}
                    style={{ transition: 'stroke-dashoffset 1s ease-in-out' }}
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <p className={`text-3xl font-bold ${scoreColor}`}>
                      {percentage}%
                    </p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      {quizResult?.summary?.score || 0}/{quizResult?.summary?.totalQuestions || 0}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Performance Message */}
            <div className="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <p className="font-medium text-gray-900 dark:text-white mb-1">
                {getPerformanceMessage(percentage)}
              </p>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {getPerformanceAdvice(percentage)}
              </p>
            </div>
          </div>
        </div>

        {/* Detailed Statistics */}
        <div className="lg:col-span-2 space-y-6">
          {/* Statistics Grid */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              Quiz Statistics
            </h3>

            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <p className="text-2xl font-bold text-gray-900 dark:text-white">
                  {quizResult?.summary?.totalQuestions || 0}
                </p>
                <p className="text-sm text-gray-600 dark:text-gray-400">Questions</p>
              </div>

              <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                <p className="text-2xl font-bold text-green-600 dark:text-green-400">
                  {quizResult?.summary?.correctAnswers || 0}
                </p>
                <p className="text-sm text-green-700 dark:text-green-300">Correct</p>
              </div>

              <div className="text-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg">
                <p className="text-2xl font-bold text-red-600 dark:text-red-400">
                  {quizResult?.summary?.incorrectAnswers || 0}
                </p>
                <p className="text-sm text-red-700 dark:text-red-300">Incorrect</p>
              </div>

              <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <p className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                  {formatTime(quizResult?.summary?.timeSpent || 0)}
                </p>
                <p className="text-sm text-blue-700 dark:text-blue-300">Time</p>
              </div>
            </div>
          </div>

          {/* User Information */}
          {userInfo && (
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Student Information
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Name</p>
                  <p className="font-medium text-gray-900 dark:text-white">{userInfo.name}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Student Number</p>
                  <p className="font-medium text-gray-900 dark:text-white">{userInfo.studentNumber}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Class Number</p>
                  <p className="font-medium text-gray-900 dark:text-white">{userInfo.classNumber}</p>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Completed at: {new Date(quizResult?.summary?.completedAt || Date.now()).toLocaleString()}
                </p>
              </div>
            </div>
          )}

          {/* Error Details (if any) */}
          {submitError && (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <svg className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                  <p className="text-red-800 dark:text-red-200 font-medium text-sm mb-1">
                    Submission Error Details
                  </p>
                  <p className="text-red-700 dark:text-red-300 text-sm">
                    {submitError}
                  </p>
                  <p className="text-red-600 dark:text-red-400 text-xs mt-2">
                    Your quiz results have been saved locally. Please contact support if this issue persists.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
        <button
          onClick={onRestartQuiz}
          className="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          <span>Take Quiz Again</span>
        </button>

        <button
          onClick={onGoHome}
          className="px-6 py-3 bg-gray-600 text-white font-medium rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center space-x-2"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          <span>Go Home</span>
        </button>
      </div>
    </div>
  )
}
</file>

<file path="src/components/quiz/QuizTimer.tsx">
import { useState, useEffect, useCallback } from 'react'
import { getRemainingTime, isSessionExpired } from '@/lib/storage'

interface QuizTimerProps {
  startTime: number
  onTimeExpire: () => void
  onTick?: (remainingTime: number) => void
}

export default function QuizTimer({ startTime, onTimeExpire, onTick }: QuizTimerProps) {
  const [remainingTime, setRemainingTime] = useState(() => getRemainingTime(startTime))
  const [isExpired, setIsExpired] = useState(false)

  useEffect(() => {
    // Check if already expired
    if (isSessionExpired(startTime)) {
      setIsExpired(true)
      onTimeExpire()
      return
    }

    const interval = setInterval(() => {
      const newRemainingTime = getRemainingTime(startTime)
      setRemainingTime(newRemainingTime)

      if (onTick) {
        onTick(newRemainingTime)
      }

      if (newRemainingTime <= 0) {
        setIsExpired(true)
        clearInterval(interval)
        onTimeExpire()
      }
    }, 1000) // Update every second

    return () => clearInterval(interval)
  }, [startTime, onTimeExpire, onTick])

  const formatTime = useCallback((seconds: number): string => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }, [])

  const getTimeColor = useCallback((): string => {
    if (remainingTime <= 60) return 'text-red-600 dark:text-red-400'
    if (remainingTime <= 180) return 'text-yellow-600 dark:text-yellow-400'
    return 'text-green-600 dark:text-green-400'
  }, [remainingTime])

  if (isExpired) {
    return null
  }

  return (
    <div className={`flex items-center justify-center ${getTimeColor()}`}>
      <div className="flex items-center space-x-2 bg-white dark:bg-gray-800 px-4 py-2 rounded-full border border-gray-200 dark:border-gray-700 shadow-sm">
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <span className="font-mono font-semibold text-lg">
          {formatTime(remainingTime)}
        </span>
      </div>
    </div>
  )
}
</file>

<file path="src/components/ui/Alert.tsx">
import { HTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

interface AlertProps extends HTMLAttributes<HTMLDivElement> {
  variant?: 'info' | 'success' | 'warning' | 'error'
  title?: string
  icon?: boolean
}

const Alert = forwardRef<HTMLDivElement, AlertProps>(
  ({ className, variant = 'info', title, icon = true, children, ...props }, ref) => {
    const variants = {
      info: 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-200',
      success: 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800 text-green-800 dark:text-green-200',
      warning: 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800 text-yellow-800 dark:text-yellow-200',
      error: 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-800 dark:text-red-200'
    }

    const iconMap = {
      info: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      ),
      success: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      ),
      warning: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
        </svg>
      ),
      error: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )
    }

    return (
      <div
        ref={ref}
        className={cn(
          'rounded-lg border p-4',
          variants[variant],
          className
        )}
        {...props}
      >
        <div className="flex">
          {icon && (
            <div className="flex-shrink-0 mr-3">
              {iconMap[variant]}
            </div>
          )}
          <div className="flex-1">
            {title && (
              <h3 className="font-medium mb-1">
                {title}
              </h3>
            )}
            <div className="text-sm">
              {children}
            </div>
          </div>
        </div>
      </div>
    )
  }
)

Alert.displayName = 'Alert'

export { Alert }
</file>

<file path="src/components/ui/AnimatedLoading.tsx">
import { cn } from '@/lib/utils'

interface AnimatedLoadingProps {
  type?: 'spinner' | 'dots' | 'pulse' | 'skeleton'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  text?: string
  className?: string
}

export function AnimatedLoading({
  type = 'spinner',
  size = 'md',
  text,
  className
}: AnimatedLoadingProps) {
  const sizes = {
    sm: {
      spinner: 'w-4 h-4',
      dots: 'gap-1',
      pulse: 'w-8 h-8',
      skeleton: 'h-4'
    },
    md: {
      spinner: 'w-6 h-6',
      dots: 'gap-2',
      pulse: 'w-12 h-12',
      skeleton: 'h-4'
    },
    lg: {
      spinner: 'w-8 h-8',
      dots: 'gap-2',
      pulse: 'w-16 h-16',
      skeleton: 'h-6'
    },
    xl: {
      spinner: 'w-12 h-12',
      dots: 'gap-3',
      pulse: 'w-20 h-20',
      skeleton: 'h-8'
    }
  }

  const renderContent = () => {
    switch (type) {
      case 'spinner':
        return (
          <div className="relative">
            <div
              className={cn(
                'animate-spin rounded-full border-2 border-gray-200 border-t-blue-600',
                sizes[size].spinner
              )}
            />
            <div
              className={cn(
                'absolute inset-0 rounded-full border-2 border-transparent border-t-blue-400 animate-ping',
                sizes[size].spinner
              )}
            />
          </div>
        )

      case 'dots':
        return (
          <div className={cn('flex', sizes[size].dots)}>
            {[0, 1, 2].map((i) => (
              <div
                key={i}
                className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"
                style={{ animationDelay: `${i * 150}ms` }}
              />
            ))}
          </div>
        )

      case 'pulse':
        return (
          <div
            className={cn(
              'bg-blue-600 rounded-full animate-pulse',
              sizes[size].pulse
            )}
          />
        )

      case 'skeleton':
        return (
          <div className="space-y-3 w-full">
            <div
              className={cn(
                'bg-gray-200 dark:bg-gray-700 rounded animate-pulse',
                sizes[size].skeleton
              )}
            />
            <div
              className={cn(
                'bg-gray-200 dark:bg-gray-700 rounded animate-pulse w-3/4',
                sizes[size].skeleton
              )}
            />
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className={cn('flex flex-col items-center justify-center', className)}>
      {renderContent()}
      {text && (
        <p className="mt-3 text-sm text-gray-600 dark:text-gray-400 animate-fade-in">
          {text}
        </p>
      )}
    </div>
  )
}

// Page transition component
export function PageTransition({
  children,
  isVisible = true
}: {
  children: React.ReactNode
  isVisible?: boolean
}) {
  return (
    <div
      className={cn(
        'transition-all duration-500 ease-in-out transform',
        isVisible
          ? 'opacity-100 translate-y-0'
          : 'opacity-0 translate-y-4'
      )}
    >
      {children}
    </div>
  )
}

// Fade in animation component
export function FadeIn({
  children,
  delay = 0,
  duration = 'normal'
}: {
  children: React.ReactNode
  delay?: number
  duration?: 'fast' | 'normal' | 'slow'
}) {
  const durations = {
    fast: 'duration-300',
    normal: 'duration-500',
    slow: 'duration-700'
  }

  return (
    <div
      className={cn(
        'animate-fade-in',
        durations[duration],
        'transition-opacity'
      )}
      style={{ animationDelay: `${delay}ms` }}
    >
      {children}
    </div>
  )
}

// Slide in animation component
export function SlideIn({
  children,
  direction = 'up',
  delay = 0
}: {
  children: React.ReactNode
  direction?: 'up' | 'down' | 'left' | 'right'
  delay?: number
}) {
  const getAnimationClass = () => {
    switch (direction) {
      case 'up':
        return 'animate-slide-up'
      case 'down':
        return 'animate-slide-down'
      case 'left':
        return 'animate-slide-left'
      case 'right':
        return 'animate-slide-right'
      default:
        return 'animate-slide-up'
    }
  }

  return (
    <div
      className={cn(
        getAnimationClass(),
        'transition-transform'
      )}
      style={{ animationDelay: `${delay}ms` }}
    >
      {children}
    </div>
  )
}

// Scale animation component
export function ScaleIn({
  children,
  delay = 0
}: {
  children: React.ReactNode
  delay?: number
}) {
  return (
    <div
      className="animate-scale-in transition-transform"
      style={{ animationDelay: `${delay}ms` }}
    >
      {children}
    </div>
  )
}
</file>

<file path="src/components/ui/Button.tsx">
import { ButtonHTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'destructive' | 'success'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  loading?: boolean
  fullWidth?: boolean
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'primary', size = 'md', loading = false, fullWidth = false, disabled, children, ...props }, ref) => {
    const baseStyles = 'inline-flex items-center justify-center font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none'

    const variants = {
      primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 disabled:bg-gray-400',
      secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500 disabled:bg-gray-400',
      outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500 disabled:bg-gray-100 disabled:text-gray-500',
      ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500 disabled:text-gray-400',
      destructive: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 disabled:bg-gray-400',
      success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500 disabled:bg-gray-400'
    }

    const sizes = {
      sm: 'h-8 px-3 text-xs',
      md: 'h-10 px-4 py-2 text-sm',
      lg: 'h-12 px-6 text-base',
      xl: 'h-14 px-8 text-lg'
    }

    return (
      <button
        className={cn(
          baseStyles,
          variants[variant],
          sizes[size],
          fullWidth && 'w-full',
          className
        )}
        ref={ref}
        disabled={disabled || loading}
        {...props}
      >
        {loading && (
          <svg className="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        )}
        {children}
      </button>
    )
  }
)

Button.displayName = 'Button'

export { Button }
</file>

<file path="src/components/ui/Card.tsx">
import { HTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

interface CardProps extends HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'outline' | 'elevated' | 'ghost'
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl'
}

const Card = forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant = 'default', padding = 'md', children, ...props }, ref) => {
    const baseStyles = 'rounded-lg border'

    const variants = {
      default: 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-sm',
      outline: 'bg-transparent border-gray-300 dark:border-gray-600',
      elevated: 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 shadow-lg',
      ghost: 'bg-transparent border-transparent'
    }

    const paddings = {
      none: '',
      sm: 'p-3',
      md: 'p-4',
      lg: 'p-6',
      xl: 'p-8'
    }

    return (
      <div
        ref={ref}
        className={cn(
          baseStyles,
          variants[variant],
          paddings[padding],
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }
)

Card.displayName = 'Card'

interface CardHeaderProps extends HTMLAttributes<HTMLDivElement> {
  title?: string
  description?: string
}

const CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ className, title, description, children, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('flex flex-col space-y-1.5 pb-4', className)}
      {...props}
    >
      {title && (
        <h3 className="text-lg font-semibold leading-none tracking-tight text-gray-900 dark:text-white">
          {title}
        </h3>
      )}
      {description && (
        <p className="text-sm text-gray-600 dark:text-gray-400">
          {description}
        </p>
      )}
      {children}
    </div>
  )
)

CardHeader.displayName = 'CardHeader'

type CardContentProps = HTMLAttributes<HTMLDivElement>

const CardContent = forwardRef<HTMLDivElement, CardContentProps>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn('pt-0', className)} {...props} />
  )
)

CardContent.displayName = 'CardContent'

type CardFooterProps = HTMLAttributes<HTMLDivElement>

const CardFooter = forwardRef<HTMLDivElement, CardFooterProps>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('flex items-center pt-4', className)}
      {...props}
    />
  )
)

CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardContent, CardFooter }
</file>

<file path="src/components/ui/Container.tsx">
import { HTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

interface ContainerProps extends HTMLAttributes<HTMLDivElement> {
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
  centered?: boolean
  padding?: boolean
}

const Container = forwardRef<HTMLDivElement, ContainerProps>(
  ({ className, size = 'lg', centered = false, padding = true, children, ...props }, ref) => {
    const sizes = {
      sm: 'max-w-sm',
      md: 'max-w-md',
      lg: 'max-w-4xl',
      xl: 'max-w-6xl',
      full: 'max-w-full'
    }

    const paddings = {
      true: 'px-4 sm:px-6 lg:px-8',
      false: ''
    } as const

    return (
      <div
        ref={ref}
        className={cn(
          'w-full',
          sizes[size],
          centered && 'mx-auto',
          padding && paddings[padding],
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }
)

Container.displayName = 'Container'

export { Container }
</file>

<file path="src/components/ui/LoadingSpinner.tsx">
import { cn } from '@/lib/utils'

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl'
  className?: string
  text?: string
}

export default function LoadingSpinner({ size = 'md', className, text }: LoadingSpinnerProps) {
  const sizes = {
    sm: 'h-4 w-4',
    md: 'h-6 w-6',
    lg: 'h-8 w-8',
    xl: 'h-12 w-12'
  }

  return (
    <div className={cn('flex items-center justify-center', className)}>
      <div className="relative">
        <div
          className={cn(
            sizes[size],
            'animate-spin rounded-full border-2 border-gray-200 border-t-blue-600'
          )}
        />
        <div
          className={cn(
            sizes[size],
            'absolute inset-0 rounded-full border-2 border-transparent border-t-blue-400 animate-ping'
          )}
        />
      </div>
      {text && (
        <span className="ml-2 text-sm text-gray-600 dark:text-gray-400">
          {text}
        </span>
      )}
    </div>
  )
}

// Pulse loader for content
export function PulseLoader({ className }: { className?: string }) {
  return (
    <div className={cn('flex space-x-2', className)}>
      <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
      <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
      <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
    </div>
  )
}

// Skeleton loader for content
export function SkeletonLoader({
  lines = 3,
  className
}: {
  lines?: number
  className?: string
}) {
  return (
    <div className={cn('space-y-3', className)}>
      {Array.from({ length: lines }).map((_, i) => (
        <div key={i} className="animate-pulse">
          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
          {i === 0 && <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mt-2"></div>}
        </div>
      ))}
    </div>
  )
}
</file>

<file path="src/components/ui/Progress.tsx">
import { HTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

interface ProgressProps extends HTMLAttributes<HTMLDivElement> {
  value: number
  max?: number
  size?: 'sm' | 'md' | 'lg'
  color?: 'blue' | 'green' | 'yellow' | 'red'
  showLabel?: boolean
  label?: string
}

const Progress = forwardRef<HTMLDivElement, ProgressProps>(
  ({ className, value, max = 100, size = 'md', color = 'blue', showLabel = false, label, ...props }, ref) => {
  const percentage = Math.min(Math.max(0, (value / max) * 100), 100)

  const sizes = {
    sm: 'h-2',
    md: 'h-3',
    lg: 'h-4'
  }

  const colors = {
    blue: {
      bg: 'bg-blue-100 dark:bg-blue-900/30',
      fill: 'bg-blue-600',
      text: 'text-blue-600 dark:text-blue-400'
    },
    green: {
      bg: 'bg-green-100 dark:bg-green-900/30',
      fill: 'bg-green-600',
      text: 'text-green-600 dark:text-green-400'
    },
    yellow: {
      bg: 'bg-yellow-100 dark:bg-yellow-900/30',
      fill: 'bg-yellow-600',
      text: 'text-yellow-600 dark:text-yellow-400'
    },
    red: {
      bg: 'bg-red-100 dark:bg-red-900/30',
      fill: 'bg-red-600',
      text: 'text-red-600 dark:text-red-400'
    }
  }

  return (
    <div className={cn('w-full', className)}>
      {showLabel && (
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
            {label || 'Progress'}
          </span>
          <span className={cn('text-sm font-medium', colors[color].text)}>
            {percentage.toFixed(0)}%
          </span>
        </div>
      )}
      <div className={cn(
        'w-full rounded-full overflow-hidden',
        colors[color].bg,
        sizes[size]
      )}>
        <div
          className={cn(
            'h-full transition-all duration-300 ease-out',
            colors[color].fill
          )}
          style={{ width: `${percentage}%` }}
        />
      </div>
    </div>
  )
})

Progress.displayName = 'Progress'

export { Progress }
</file>

<file path="src/lib/blob-debug.ts">
/**
 * Vercel Blob Storage Debugging Tools
 *
 * This file contains utilities to help debug blob storage issues
 */

import { put, list, head } from '@vercel/blob';
import { checkBlobStorageConfig } from './dev-storage';

export interface DebugInfo {
  timestamp: string;
  environment: string;
  hasToken: boolean;
  tokenLength?: number;
  tokenPrefix?: string;
  configuration: {
    isConfigured: boolean;
    message: string;
    canProceed: boolean;
  };
  tests: {
    tokenValidation: TestResult;
    listTest: TestResult;
    putTest: TestResult;
    headTest: TestResult;
  };
  recommendations: string[];
}

export interface TestResult {
  success: boolean;
  message: string;
  error?: string;
  details?: any;
}

/**
 * Comprehensive blob storage debugging function
 */
export async function debugBlobStorage(): Promise<DebugInfo> {
  const timestamp = new Date().toISOString();
  const environment = process.env.NODE_ENV || 'unknown';
  const hasToken = !!process.env.BLOB_READ_WRITE_TOKEN;
  const token = process.env.BLOB_READ_WRITE_TOKEN || '';

  const debugInfo: DebugInfo = {
    timestamp,
    environment,
    hasToken,
    tokenLength: hasToken ? token.length : 0,
    tokenPrefix: hasToken ? token.substring(0, 10) + '...' : 'none',
    configuration: checkBlobStorageConfig(),
    tests: {
      tokenValidation: { success: false, message: 'Not tested' },
      listTest: { success: false, message: 'Not tested' },
      putTest: { success: false, message: 'Not tested' },
      headTest: { success: false, message: 'Not tested' }
    },
    recommendations: []
  };

  console.log('🔍 Starting Vercel Blob Storage Debug...');
  console.log(`📍 Environment: ${environment}`);
  console.log(`🔑 Token Present: ${hasToken}`);
  console.log(`📏 Token Length: ${debugInfo.tokenLength}`);

  // Test 1: Token Validation
  debugInfo.tests.tokenValidation = await testTokenValidation();

  // Test 2: List Blobs
  debugInfo.tests.listTest = await testListOperation();

  // Test 3: Put Operation (only if list test passed)
  if (debugInfo.tests.listTest.success) {
    debugInfo.tests.putTest = await testPutOperation();
  } else {
    debugInfo.tests.putTest = {
      success: false,
      message: 'Skipped due to list test failure',
      error: debugInfo.tests.listTest.error
    };
  }

  // Test 4: Head Operation (if we have blobs)
  if (debugInfo.tests.listTest.success) {
    debugInfo.tests.headTest = await testHeadOperation();
  } else {
    debugInfo.tests.headTest = {
      success: false,
      message: 'Skipped due to list test failure',
      error: debugInfo.tests.listTest.error
    };
  }

  // Generate recommendations
  debugInfo.recommendations = generateRecommendations(debugInfo);

  // Log detailed results
  console.log('\n📊 Debug Results:');
  console.table(debugInfo.tests);

  if (debugInfo.recommendations.length > 0) {
    console.log('\n💡 Recommendations:');
    debugInfo.recommendations.forEach((rec, index) => {
      console.log(`${index + 1}. ${rec}`);
    });
  }

  return debugInfo;
}

/**
 * Test token validation
 */
async function testTokenValidation(): Promise<TestResult> {
  try {
    const token = process.env.BLOB_READ_WRITE_TOKEN;

    if (!token) {
      return {
        success: false,
        message: 'BLOB_READ_WRITE_TOKEN not found in environment variables',
        error: 'Missing environment variable'
      };
    }

    if (token.length < 10) {
      return {
        success: false,
        message: 'Token appears to be too short',
        error: 'Invalid token format',
        details: { tokenLength: token.length }
      };
    }

    // Basic token format validation
    const validFormats = [
      /^blob_[a-zA-Z0-9]+$/,  // Vercel blob tokens usually start with 'blob_'
      /^vercel_blob_rw_[a-zA-Z0-9]+$/,
      /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/  // UUID format
    ];

    const isValidFormat = validFormats.some(regex => regex.test(token));

    if (!isValidFormat) {
      return {
        success: false,
        message: 'Token format does not match expected Vercel blob token patterns',
        error: 'Invalid token format',
        details: {
          tokenPrefix: token.substring(0, Math.min(20, token.length)),
          expectedFormats: ['blob_*', 'vercel_blob_rw_*', 'UUID format']
        }
      };
    }

    return {
      success: true,
      message: 'Token appears to be valid',
      details: { tokenLength: token.length, tokenPrefix: token.substring(0, 10) + '...' }
    };

  } catch (error) {
    return {
      success: false,
      message: 'Error validating token',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Test list operation
 */
async function testListOperation(): Promise<TestResult> {
  try {
    console.log('🔍 Testing list operation...');
    const result = await list();

    return {
      success: true,
      message: `Successfully listed ${result.blobs.length} blobs`,
      details: {
        blobCount: result.blobs.length,
        blobUrls: result.blobs.map(b => b.pathname),
        hasPermissions: true
      }
    };

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';

    let helpfulError = errorMessage;
    if (errorMessage.includes('401') || errorMessage.includes('403')) {
      helpfulError = 'Permission denied - check your BLOB_READ_WRITE_TOKEN';
    } else if (errorMessage.includes('404')) {
      helpfulError = 'Blob store not found - ensure you created a blob store in Vercel';
    } else if (errorMessage.includes('ENOTFOUND') || errorMessage.includes('fetch')) {
      helpfulError = 'Network error - check your internet connection';
    }

    return {
      success: false,
      message: helpfulError,
      error: errorMessage,
      details: {
        errorType: error instanceof Error ? error.constructor.name : 'Unknown',
        probableCause: getProbableCause(errorMessage)
      }
    };
  }
}

/**
 * Test put operation
 */
async function testPutOperation(): Promise<TestResult> {
  try {
    console.log('📝 Testing put operation...');

    const testData = {
      test: true,
      timestamp: new Date().toISOString(),
      message: 'This is a test file for debugging blob storage'
    };

    const blob = await put('debug-test.json', JSON.stringify(testData, null, 2), {
      access: 'public',
      contentType: 'application/json',
    });

    // Test if we can read it back
    const response = await fetch(blob.url);
    const readBack = await response.json();

    const success = readBack.test === true && readBack.timestamp === testData.timestamp;

    return {
      success,
      message: success ? 'Successfully wrote and read back test data' : 'Write succeeded but read back failed',
      details: {
        uploadUrl: blob.url,
        uploadedAt: blob.uploadedAt,
        readBackSuccess: success,
        testData: testData,
        readBackData: success ? readBack : 'Failed to read'
      }
    };

  } catch (error) {
    return {
      success: false,
      message: 'Put operation failed',
      error: error instanceof Error ? error.message : 'Unknown error',
      details: {
        errorType: error instanceof Error ? error.constructor.name : 'Unknown'
      }
    };
  }
}

/**
 * Test head operation
 */
async function testHeadOperation(): Promise<TestResult> {
  try {
    console.log('🔍 Testing head operation...');

    const { blobs } = await list();

    if (blobs.length === 0) {
      return {
        success: true,
        message: 'No blobs to test head operation (this is normal)',
        details: { blobCount: 0 }
      };
    }

    // Test head on first blob
    const firstBlob = blobs[0];
    const headResult = await head(firstBlob.url);

    return {
      success: true,
      message: 'Successfully performed head operation',
      details: {
        testedBlob: firstBlob.pathname,
        contentType: headResult.contentType,
        size: headResult.size,
        uploadedAt: headResult.uploadedAt
      }
    };

  } catch (error) {
    return {
      success: false,
      message: 'Head operation failed',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Determine probable cause of error
 */
function getProbableCause(errorMessage: string): string {
  if (errorMessage.includes('401') || errorMessage.includes('403')) {
    return 'Invalid or insufficient permissions';
  }
  if (errorMessage.includes('404')) {
    return 'Blob store not created or deleted';
  }
  if (errorMessage.includes('ENOTFOUND') || errorMessage.includes('fetch')) {
    return 'Network connectivity issue';
  }
  if (errorMessage.includes('CORS')) {
    return 'CORS configuration issue';
  }
  return 'Unknown - check Vercel dashboard for blob store status';
}

/**
 * Generate recommendations based on test results
 */
function generateRecommendations(debugInfo: DebugInfo): string[] {
  const recommendations: string[] = [];

  if (!debugInfo.hasToken) {
    recommendations.push('Add BLOB_READ_WRITE_TOKEN to your environment variables');
    recommendations.push('Get the token from Vercel dashboard → Storage → Your Blob Store');
  }

  if (!debugInfo.tests.tokenValidation.success) {
    recommendations.push('Verify your BLOB_READ_WRITE_TOKEN is correct and complete');
    recommendations.push('Ensure you copied the entire token without extra spaces');
  }

  if (!debugInfo.tests.listTest.success) {
    if (debugInfo.tests.listTest.error?.includes('401') || debugInfo.tests.listTest.error?.includes('403')) {
      recommendations.push('Check that your token has read/write permissions');
      recommendations.push('Regenerate the token in Vercel dashboard if needed');
    }
    if (debugInfo.tests.listTest.error?.includes('404')) {
      recommendations.push('Create a blob store in your Vercel project dashboard');
      recommendations.push('Ensure the blob store is in the same project as your app');
    }
  }

  if (debugInfo.tests.putTest.success && !debugInfo.tests.headTest.success) {
    recommendations.push('Put operation works but there may be read permission issues');
  }

  if (debugInfo.environment === 'development' && !debugInfo.hasToken) {
    recommendations.push('For local development, you can continue without blob storage (localStorage fallback)');
    recommendations.push('Add the token to .env.local for full functionality');
  }

  if (debugInfo.environment === 'production' && !debugInfo.hasToken) {
    recommendations.push('⚠️ PRODUCTION: You must add BLOB_READ_WRITE_TOKEN environment variable');
    recommendations.push('Set this in Vercel dashboard → Settings → Environment Variables');
  }

  if (recommendations.length === 0) {
    recommendations.push('✅ Everything looks good! Your blob storage is properly configured');
  }

  return recommendations;
}

/**
 * Quick health check for blob storage
 */
export async function quickHealthCheck(): Promise<{ healthy: boolean; message: string }> {
  try {
    const { blobs } = await list();
    return {
      healthy: true,
      message: `✅ Blob storage is healthy (${blobs.length} blobs found)`
    };
  } catch (error) {
    return {
      healthy: false,
      message: `❌ Blob storage error: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
  }
}

/**
 * Console logging utility for debugging
 */
export function logDebugInfo(debugInfo: DebugInfo): void {
  console.group('🔍 Vercel Blob Storage Debug Report');
  console.log('Timestamp:', debugInfo.timestamp);
  console.log('Environment:', debugInfo.environment);
  console.log('Token Present:', debugInfo.hasToken);
  console.log('Token Length:', debugInfo.tokenLength);

  console.group('Test Results');
  Object.entries(debugInfo.tests).forEach(([testName, result]) => {
    console.log(`${testName}: ${result.success ? '✅' : '❌'} ${result.message}`);
    if (result.error) {
      console.log(`  Error: ${result.error}`);
    }
  });
  console.groupEnd();

  if (debugInfo.recommendations.length > 0) {
    console.group('Recommendations');
    debugInfo.recommendations.forEach((rec, index) => {
      console.log(`${index + 1}. ${rec}`);
    });
    console.groupEnd();
  }

  console.groupEnd();
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/api/hello.ts">
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  name: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>,
) {
  res.status(200).json({ name: "John Doe" });
}
</file>

<file path="src/pages/_app.tsx">
import "@/styles/globals.css";
import type { AppProps } from "next/app";

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}
</file>

<file path="src/pages/admin-debug.tsx">
import type { NextPage } from 'next'
import Head from 'next/head'
import { useState, useEffect } from 'react'
import { blobStorage } from '@/lib/blob-storage'
import { Question } from '@/types/quiz'

const AdminDebugPage: NextPage = () => {
  const [questions, setQuestions] = useState<Question[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [logs, setLogs] = useState<string[]>([])

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString()
    const logMessage = `${timestamp}: ${message}`
    setLogs(prev => [...prev, logMessage])
    console.log(logMessage)
  }

  useEffect(() => {
    const loadQuestions = async () => {
      try {
        addLog('🔄 Starting to load questions...')
        setIsLoading(true)
        setError(null)

        const loadedQuestions = await blobStorage.getQuestions()
        addLog(`✅ Questions loaded: ${JSON.stringify(loadedQuestions, null, 2)}`)
        addLog(`📊 Questions count: ${loadedQuestions.length}`)

        setQuestions(loadedQuestions)
        addLog('🎯 Questions state set')
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : 'Unknown error'
        addLog(`❌ Failed to load questions: ${errorMsg}`)
        setError(errorMsg)
      } finally {
        addLog('🏁 Loading finished, setting isLoading to false')
        setIsLoading(false)
      }
    }

    loadQuestions()
  }, [])

  return (
    <>
      <Head>
        <title>Admin Debug - FMIB Quiz</title>
      </Head>

      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 p-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold mb-6">🔍 Admin Debug Page</h1>

          {/* Status */}
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-6">
            <h2 className="text-xl font-semibold mb-4">Status</h2>
            <div className="space-y-2">
              <p><strong>Loading:</strong> {isLoading ? '✅ Yes' : '❌ No'}</p>
              <p><strong>Questions Count:</strong> {questions.length}</p>
              <p><strong>Error:</strong> {error || 'None'}</p>
            </div>
          </div>

          {/* Questions */}
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-6">
            <h2 className="text-xl font-semibold mb-4">Questions Data</h2>
            <pre className="bg-gray-100 dark:bg-gray-900 p-4 rounded text-xs overflow-x-auto">
              {JSON.stringify(questions, null, 2)}
            </pre>
          </div>

          {/* Logs */}
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow mb-6">
            <h2 className="text-xl font-semibold mb-4">Debug Logs</h2>
            <div className="bg-gray-900 text-green-400 p-4 rounded font-mono text-sm h-64 overflow-y-auto">
              {logs.length === 0 ? (
                <p className="text-gray-400">No logs yet...</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Actions */}
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Actions</h2>
            <div className="space-x-4">
              <button
                onClick={() => window.location.href = '/admin'}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Go to Admin Page
              </button>
              <button
                onClick={() => window.location.reload()}
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
              >
                Reload Debug Page
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export default AdminDebugPage
</file>

<file path="src/types/quiz.ts">
// Re-export types from storage for convenience
export type {
  QuizAnswer,
  UserInfo,
  QuizSession,
  Question
} from '@/lib/storage'

// Additional quiz-related types
export interface QuizResult {
  score: number
  totalQuestions: number
  correctAnswers: number
  timeSpent: number // in seconds
  answers: Array<{
    questionId: string
    question: string
    selectedAnswer: string
    correctAnswer: string
    isCorrect: boolean
  }>
}

export interface QuizState {
  currentQuestionIndex: number
  answers: QuizAnswer[]
  timeRemaining: number
  isCompleted: boolean
  userInfo: UserInfo | null
}
</file>

<file path=".eslintrc.json">
{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".prettierrc">
{
  "plugins": [
    "prettier-plugin-tailwindcss"
  ]
}
</file>

<file path="BLOB_STORAGE_SETUP.md">
# Vercel Blob Storage Implementation

This document explains how the FMIB Quiz application uses Vercel Blob storage to persist quiz questions across deployments.

## 🎯 Overview

The quiz application has been migrated from localStorage to Vercel Blob storage to ensure data persistence when deployed to Vercel. This implementation includes:

- ✅ **Persistent Storage**: Questions are stored in Vercel Blob storage and persist across deployments
- ✅ **Development Fallback**: Uses localStorage when blob storage is not configured (development mode)
- ✅ **Error Handling**: Comprehensive error handling with fallback mechanisms
- ✅ **Backup System**: Automatic backup creation when saving questions
- ✅ **Migration Support**: Easy migration from existing localStorage data

## 📁 File Structure

```
src/lib/
├── blob-storage.ts     # Main blob storage implementation
├── dev-storage.ts      # Development fallback utilities
└── storage.ts          # Original localStorage utilities (still used for sessions)

src/pages/
├── admin.tsx           # Updated to use blob storage
└── api/quiz/
    └── questions.ts    # Updated API endpoint

.env.local.example      # Environment variables template
```

## 🚀 Setup Instructions

### 1. Development Setup (Optional)

For local development, the app will automatically fall back to localStorage if blob storage is not configured.

```bash
# Copy the environment template
cp .env.local.example .env.local

# The app will work without configuration in development mode
npm run dev
```

### 2. Production Setup (Required for Deployment)

#### Step 1: Create Vercel Blob Store

1. Go to your [Vercel Dashboard](https://vercel.com/dashboard)
2. Select your project
3. Go to the **Storage** tab
4. Click **Create Database**
5. Select **Blob** storage
6. Choose your region and create the store

#### Step 2: Configure Environment Variables

1. In your Vercel project, go to **Settings** → **Environment Variables**
2. Add the following variable:
   ```
   BLOB_READ_WRITE_TOKEN=your_token_here
   ```
3. The token is available in your Blob store settings

#### Step 3: Deploy

```bash
# Deploy to Vercel
vercel --prod
```

## 🔧 How It Works

### Storage Flow

```
Admin Interface → blobStorage.saveQuestions() → Vercel Blob API
                                                    ↓
Quiz API ← blobStorage.getQuestions() ← Vercel Blob API
```

### Development Mode Flow

```
Admin Interface → blobStorage.saveQuestions() → localStorage (fallback)
                                                    ↓
Quiz API ← blobStorage.getQuestions() ← localStorage (fallback)
```

### Data Structure

Questions are stored as JSON in Vercel Blob storage:

```json
[
  {
    "id": "q1",
    "question": "What is the capital of France?",
    "answers": [
      { "id": "a1", "text": "London", "isCorrect": false },
      { "id": "a2", "text": "Paris", "isCorrect": true },
      { "id": "a3", "text": "Berlin", "isCorrect": false },
      { "id": "a4", "text": "Madrid", "isCorrect": false }
    ]
  }
]
```

## 📊 Features

### 1. **Automatic Backups**

Every time you save questions, a backup is automatically created with a timestamp:

```
quiz-questions-backup-2025-10-23T17-00-00-000Z.json
```

### 2. **Storage Information**

The admin panel shows:
- Total number of questions
- Number of available backups
- Storage usage statistics
- Storage type indicator

### 3. **Error Handling**

- ✅ Network errors: Fallback to cached questions
- ✅ Invalid data: Use default questions
- ✅ Configuration errors: Clear error messages with instructions
- ✅ Permission errors: Development mode fallback

### 4. **Migration Support**

If you have existing questions in localStorage, the system will automatically:
1. Detect localStorage questions on first load
2. Offer to migrate them to blob storage
3. Clear localStorage after successful migration

## 🔍 API Response

The quiz API now includes storage information:

```json
{
  "success": true,
  "message": "Questions retrieved successfully from Vercel Blob storage",
  "data": {
    "questions": [...],
    "totalQuestions": 5,
    "storageInfo": {
      "type": "vercel-blob",
      "persistent": true,
      "description": "Questions are stored in Vercel Blob storage and persist across deployments"
    }
  },
  "meta": {
    "storageVersion": "blob-storage",
    "version": "2.0.0"
  }
}
```

## 🛠️ Troubleshooting

### Common Issues

#### 1. "BLOB_READ_WRITE_TOKEN not found"

**Solution**: Add the environment variable in your Vercel project settings.

#### 2. "Failed to fetch questions from blob storage"

**Solution**: Check your token permissions and ensure the blob store exists.

#### 3. Questions not persisting after deployment

**Solution**: Verify the environment variable is set in production (not just .env.local).

### Debug Mode

Enable debug logging by checking the browser console:

```javascript
// In browser console
localStorage.setItem('fmib_debug', 'true');
```

## 📈 Benefits

### Before (localStorage)
- ❌ Data lost on deployment
- ❌ Limited storage capacity
- ❌ No backup system
- ❌ No sharing between environments

### After (Vercel Blob)
- ✅ Persistent across deployments
- ✅ Virtually unlimited storage
- ✅ Automatic backups
- ✅ Global CDN distribution
- ✅ Version control friendly
- ✅ Production-ready

## 🔄 Migration from localStorage

If you're upgrading from the localStorage version:

1. **Automatic Detection**: The app detects existing localStorage questions
2. **Migration Prompt**: Offers to migrate to blob storage
3. **Backup Creation**: Creates a backup before migration
4. **Cleanup**: Removes localStorage data after successful migration

### Manual Migration

```javascript
// In browser console
const questions = JSON.parse(localStorage.getItem('fmib_quiz_questions'));
console.log('Questions to migrate:', questions);
```

## 🚨 Important Notes

1. **Session Storage**: User sessions still use localStorage for performance
2. **Development Mode**: localStorage fallback works only in development
3. **Production**: BLOB_READ_WRITE_TOKEN is required for production deployment
4. **Backups**: Backups are created automatically but can be managed manually
5. **Security**: API responses exclude correct answers for security

## 📞 Support

If you encounter issues:

1. Check the browser console for error messages
2. Verify your environment variables
3. Ensure your Vercel Blob store is properly configured
4. Check the network tab for failed API requests

## 🎉 Success Indicators

You'll know everything is working when you see:

- ✅ "Vercel Blob ✨" in the admin panel storage status
- ✅ "Loading questions from Vercel Blob..." in the loading state
- ✅ No error messages in the console
- ✅ Questions persist after redeployment
- ✅ Backup buttons working in the admin panel
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

FMIB Quiz is a modern quiz application built with Next.js 15, TypeScript, and Tailwind CSS v4. The application provides an interactive quiz experience with admin management capabilities and persistent storage using Vercel Blob Storage.

## Development Commands

### Core Development
- `npm run dev` - Start development server with Turbopack
- `npm run build` - Build production version with Turbopack
- `npm run start` - Start production server
- `npm run lint` - Run ESLint

### Testing
No test framework is currently configured. Consider adding Jest, Vitest, or Playwright if tests are needed.

## Architecture

### Framework & Routing
- **Next.js 15** with Pages Router (not App Router)
- Pages are located in `src/pages/`
- API routes are located in `src/pages/api/`
- Path alias configured: `@/*` maps to `./src/*`

### Storage Architecture
The application uses a dual storage system:
1. **Vercel Blob Storage** (Production) - Persistent across deployments
2. **localStorage** (Development & Fallback) - For session management

Key storage files:
- `src/lib/blob-storage.ts` - Vercel Blob storage client with fallbacks
- `src/lib/storage.ts` - localStorage utilities for session management
- `src/pages/api/blob-questions.ts` - Full CRUD API for blob storage

### Application Structure

#### Main Pages
- `src/pages/index.tsx` - Landing page (auto-redirects to /quiz)
- `src/pages/quiz.tsx` - Main quiz interface with timer and navigation
- `src/pages/admin.tsx` - Admin panel for question management
- `src/pages/certificate.tsx` - Certificate generation

#### Core Services
- `src/lib/quizService.ts` - Quiz business logic, validation, and API interaction
- `src/lib/api.ts` - HTTP API client with error handling
- `src/types/quiz.ts` - TypeScript definitions for quiz data

#### Component Architecture
- `src/components/ui/` - Reusable UI components (shadcn-inspired)
- `src/components/quiz/` - Quiz-specific components
- `src/components/admin/` - Admin-specific components

### Key Features

#### Quiz System
- **Timer System** - 10-minute countdown with auto-submission
- **Session Management** - Progress tracked in localStorage
- **Answer Persistence** - Auto-save on each selection
- **Certificate Generation** - PDF certificates for scores ≥60%

#### Admin Features
- **Question CRUD** - Create, read, update, delete questions
- **Import/Export** - JSON format for question backup
- **Storage Monitoring** - Debug tools for blob storage

### API Routes
- `/api/quiz/questions` - Fetch quiz questions (supports blob and mock data)
- `/api/quiz/submit` - Submit quiz answers for grading
- `/api/blob-questions` - Full CRUD for blob storage management
- `/api/debug-blob` - Debug utilities for storage issues

### Environment Variables
```bash
BLOB_READ_WRITE_TOKEN=your_token_here      # Vercel Blob storage
NEXT_PUBLIC_APP_URL=http://localhost:3000  # App URL
NODE_ENV=development                       # Environment mode
```

### Styling
- **Tailwind CSS v4** with inline theme configuration
- CSS variables for dark/light mode support defined in `src/styles/globals.css`
- Geist font family (sans and mono variants) configured globally
- Responsive design with mobile-first approach

### Development Notes

#### Session Flow
1. User Info Collection → Save to localStorage
2. Quiz Session → Track progress, answers, timer (10-minute countdown)
3. Auto-save → Answers saved on each selection
4. Session Timeout → Automatic submission
5. Results → Certificate generation for passing scores

#### Security Features
- Correct answer masking in API responses
- Session validation with timeout checks
- Input validation for questions and answers
- No authentication system (public interface)

#### Build Configuration
- Uses Turbopack for both development and production builds
- React Strict Mode enabled in configuration
- Standard Next.js build output optimization
- TypeScript with strict compilation

## Working with This Codebase

### Key Entry Points
- Start with `src/pages/quiz.tsx` for main quiz flow
- `src/pages/admin.tsx` for question management
- `src/lib/blob-storage.ts` for storage operations
- `src/lib/quizService.ts` for business logic

### Important Patterns
- Uses Vercel Blob storage with localStorage fallback
- Timer-based auto-submission after 10 minutes
- Session management with localStorage persistence
- Component composition for reusability
- Type-safe API layer with comprehensive error handling

### Configuration Points
- Environment variables in `.env.local`
- Blob storage configuration for production deployment
- Timer and session settings in constants
- UI theming through Tailwind CSS variables
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;
</file>

<file path="planning.md">
- The website is quizapp
- use tailwindcss, shadcn for styling
- Have 2 page: admin for config questions and answers, page for user
- User page: 
 - Have form for user input:name, student number, class number (all first is required)
 - After submit user information, next is the question page, each page is one question and 4 answer, require choose answer before click next
 - User answer store in localstorage
 - in last question, collect all user answer in localstorage and submit to backend api to verify
 - session is 10 minute after submit user information form, mean when first question display, user have 10 minute to complete, display as countdown timer
 - if user if not complete before 10 minute, automatic complete the session, collect answer to submit backend check
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="tasks.md">
# FMIB Quiz Application Task Breakdown

## Project Setup & Configuration ✅
- [x] Install and configure shadcn/ui components
- [x] Set up project structure for quiz application
- [x] Configure routing for admin and user pages
- [x] Set up local storage utilities for quiz data
- [x] Create base layout components

## Admin Page Development ✅
- [x] Create admin page layout and navigation
- [x] Implement question management interface
- [x] Create form for adding/editing questions
- [x] Create form for adding/editing answers (4 per question)
- [x] Implement question list display with edit/delete options
- [x] Add save/load functionality for quiz data
- [x] Implement data persistence (localStorage or backend)

## User Page - Information Form ✅
- [x] Create user information form with:
  - [x] Name input (required)
  - [x] Student number input (required)
  - [x] Class number input (required)
- [x] Implement form validation
- [x] Store user information in localStorage
- [x] Create transition from info form to quiz questions

## Quiz Question Pages ✅
- [x] Create question display component
- [x] Implement 4 answer options with radio buttons or cards
- [x] Add validation to require answer selection
- [x] Implement "Next" button functionality
- [x] Create navigation between questions
- [x] Store user answers in localStorage after each selection
- [x] Implement question progress indicator

## Timer Functionality ✅
- [x] Create countdown timer component (10 minutes)
- [x] Start timer when first question is displayed
- [x] Display timer prominently on quiz pages
- [x] Implement auto-submit when timer expires
- [x] Handle timer state management

## Backend API Development ✅
- [x] Create API endpoint for quiz questions
- [x] Create API endpoint for submitting quiz answers
- [x] Implement answer verification logic
- [x] Create API response format for results
- [x] Add error handling for API requests

## Final Submission & Results ✅
- [x] Collect all answers from localStorage on final question
- [x] Implement submission to backend API
- [x] Create results display page
- [x] Show score/feedback to user
- [x] Implement session cleanup after submission
## Styling & UX Polish ✅
- [x] Apply consistent Tailwind CSS styling throughout
- [x] Implement responsive design for mobile/tablet/desktop
- [x] Add loading states and transitions
- [x] Implement error handling and user feedback
- [x] Add accessibility features (ARIA labels, keyboard navigation)
- [x] Test dark mode compatibility

## Testing & Quality Assurance ✅
- [x] Test complete quiz flow from start to finish
- [x] Test timer functionality and auto-submit
- [x] Test form validation requirements
- [x] Test admin question management
- [x] Verify data persistence in localStorage
- [x] Test API endpoints and error handling
- [x] Perform cross-browser testing
- [x] Test responsive design on various screen sizes
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/lib/dev-storage.ts">
import { Question } from "./storage";

/**
 * Development utility for handling blob storage configuration
 */

export const checkBlobStorageConfig = (): {
  isConfigured: boolean;
  message: string;
  canProceed: boolean;
} => {
  // Check if we're in development mode
  const isDevelopment = process.env.NODE_ENV === "development";

  // Check if blob token is configured
  const hasBlobToken = !!process.env.BLOB_READ_WRITE_TOKEN;

  if (!hasBlobToken) {
    return {
      isConfigured: false,
      message: isDevelopment
        ? "⚠️ Vercel Blob storage is not configured. Using localStorage for development. To use blob storage, set BLOB_READ_WRITE_TOKEN in your .env.local file."
        : "❌ Vercel Blob storage is not configured. Please set BLOB_READ_WRITE_TOKEN environment variable.",
      canProceed: isDevelopment, // Allow proceeding in development with localStorage fallback
    };
  }

  return {
    isConfigured: true,
    message: "✅ Vercel Blob storage is properly configured.",
    canProceed: true,
  };
};

/**
 * Development fallback storage when blob storage is not configured
 */
export const devFallbackStorage = {
  saveQuestions: (questions: Question[]): void => {
    if (typeof window !== "undefined") {
      localStorage.setItem(
        "fmib_quiz_questions_dev",
        JSON.stringify(questions),
      );
      console.log("📝 Questions saved to localStorage (development fallback)");
    }
  },

  getQuestions: (): Question[] => {
    if (typeof window !== "undefined") {
      const questionsData = localStorage.getItem("fmib_quiz_questions_dev");
      if (questionsData) {
        const questions = JSON.parse(questionsData);
        console.log(
          "📥 Questions loaded from localStorage (development fallback)",
        );
        return questions;
      }
    }

    // Return default questions if nothing is stored
    const defaultQuestions: Question[] = [
      {
        id: "dev-1",
        question: "What is the capital of France? (Development Mode)",
        answers: [
          { id: "a1", text: "London", isCorrect: false },
          { id: "a2", text: "Berlin", isCorrect: false },
          { id: "a3", text: "Paris", isCorrect: true },
          { id: "a4", text: "Madrid", isCorrect: false },
        ],
      },
      {
        id: "dev-2",
        question: "What is 2 + 2? (Development Mode)",
        answers: [
          { id: "a3", text: "3", isCorrect: false },
          { id: "a4", text: "4", isCorrect: true },
          { id: "a5", text: "5", isCorrect: false },
          { id: "a6", text: "22", isCorrect: false },
        ],
      },
    ];

    console.log("📝 Using default development questions");
    return defaultQuestions;
  },

  clearQuestions: (): void => {
    if (typeof window !== "undefined") {
      localStorage.removeItem("fmib_quiz_questions_dev");
      console.log("🗑️ Development questions cleared from localStorage");
    }
  },
};

/**
 * Show development configuration warning
 */
export const showDevWarning = (): void => {
  const config = checkBlobStorageConfig();

  if (!config.isConfigured && typeof window !== "undefined") {
    console.log(`
🚀 FMIB Quiz - Development Mode
${config.message}

To configure Vercel Blob storage:
1. Go to your Vercel project dashboard
2. Navigate to Storage tab
3. Create a new Blob store
4. Copy the BLOB_READ_WRITE_TOKEN
5. Add it to your .env.local file

For now, using localStorage for development.
    `);
  }
};
</file>

<file path="src/lib/quizService.ts">
import { quizApi, handleApiError, ApiError } from './api'
import { Question, QuizAnswer, QuizResult, UserInfo } from '@/types/quiz'

export interface QuizSubmission {
  userInfo: UserInfo
  answers: QuizAnswer[]
  questions: Question[]
  startTime: number
  endTime: number
  timeExpired?: boolean
}

export interface QuizServiceResponse {
  success: boolean
  message: string
  data?: {
    questions?: Question[]
    result?: QuizResult
    summary?: {
      totalQuestions: number
      correctAnswers: number
      incorrectAnswers: number
      score: number
      percentage: number
      timeSpent: number
      completedAt: string
    }
  }
  error?: string
}

class QuizService {
  /**
   * Fetch quiz questions from the API
   */
  async fetchQuestions(): Promise<QuizServiceResponse> {
    try {
      const data = await quizApi.getQuestions()

      return {
        success: true,
        message: 'Questions fetched successfully',
        data: {
          questions: data.questions,
        }
      }
    } catch (error) {
      console.error('Error fetching questions:', error)
      return {
        success: false,
        message: 'Failed to fetch questions',
        error: handleApiError(error)
      }
    }
  }

  /**
   * Submit quiz answers to the API
   */
  async submitQuiz(submission: QuizSubmission): Promise<QuizServiceResponse> {
    try {
      const data = await quizApi.submitQuiz(submission)

      return {
        success: true,
        message: submission.timeExpired
          ? 'Quiz submitted automatically due to time limit'
          : 'Quiz submitted successfully',
        data: {
          result: data.result,
          summary: data.summary
        }
      }
    } catch (error) {
      console.error('Error submitting quiz:', error)
      return {
        success: false,
        message: 'Failed to submit quiz',
        error: handleApiError(error)
      }
    }
  }

  /**
   * Simulate quiz submission (fallback for when API is unavailable)
   * This can be used for offline mode or during development
   */
  async simulateSubmission(submission: QuizSubmission): Promise<QuizServiceResponse> {
    try {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 1000))

      // Use actual questions for grading if available
      let totalQuestions = submission.answers.length
      let correctAnswers = 0
      const answers = []

      if (submission.questions && submission.questions.length > 0) {
        totalQuestions = submission.questions.length

        for (const question of submission.questions) {
          const userAnswer = submission.answers.find(a => a.questionId === question.id)
          const correctAnswerIds = question.answers.filter(a => a.isCorrect).map(a => a.id)

          let selectedAnswerText = 'Not answered'
          let isCorrect = false

          if (userAnswer) {
            const selectedAnswerObj = question.answers.find(a => a.id === userAnswer.answerId)
            selectedAnswerText = selectedAnswerObj?.text || 'Invalid answer'
            isCorrect = correctAnswerIds.includes(userAnswer.answerId)
          }

          if (isCorrect) correctAnswers++

          answers.push({
            questionId: question.id,
            question: question.question,
            selectedAnswer: selectedAnswerText,
            correctAnswer: question.answers.filter(a => a.isCorrect).map(a => a.text).join(', '),
            isCorrect
          })
        }
      } else {
        // Fallback to random calculation if no questions provided
        correctAnswers = Math.floor(Math.random() * totalQuestions)

        for (let i = 0; i < totalQuestions; i++) {
          const isCorrect = i < correctAnswers
          answers.push({
            questionId: submission.answers[i]?.questionId || `q${i}`,
            question: `Question ${i + 1}`,
            selectedAnswer: 'Selected answer',
            correctAnswer: 'Correct answer',
            isCorrect
          })
        }
      }

      const score = correctAnswers
      const percentage = Math.round((correctAnswers / totalQuestions) * 100)
      const timeSpent = Math.round((submission.endTime - submission.startTime) / 1000)

      const mockResult: QuizResult = {
        score,
        totalQuestions,
        correctAnswers,
        timeSpent,
        answers
      }

      const mockSummary = {
        totalQuestions,
        correctAnswers,
        incorrectAnswers: totalQuestions - correctAnswers,
        score,
        percentage,
        timeSpent,
        completedAt: new Date().toISOString()
      }

      return {
        success: true,
        message: submission.timeExpired
          ? 'Quiz completed (time expired - simulation mode)'
          : 'Quiz completed successfully (simulation mode)',
        data: {
          result: mockResult,
          summary: mockSummary
        }
      }
    } catch (error) {
      console.error('Error in simulation:', error)
      return {
        success: false,
        message: 'Failed to complete quiz simulation',
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }
  }

  /**
   * Validate quiz submission data
   */
  validateSubmission(submission: QuizSubmission): {
    isValid: boolean
    errors: string[]
  } {
    const errors: string[] = []

    // Validate user info
    if (!submission.userInfo.name?.trim()) {
      errors.push('Name is required')
    }
    if (!submission.userInfo.studentNumber?.trim()) {
      errors.push('Student number is required')
    }
    if (!submission.userInfo.classNumber?.trim()) {
      errors.push('Class number is required')
    }

    // Validate answers
    if (!submission.answers || submission.answers.length === 0) {
      errors.push('At least one answer is required')
    }

    // Validate time range
    const timeSpent = submission.endTime - submission.startTime
    if (timeSpent <= 0) {
      errors.push('End time must be after start time')
    }
    if (timeSpent > 10 * 60 * 1000) { // 10 minutes
      errors.push('Quiz duration exceeds time limit')
    }

    return {
      isValid: errors.length === 0,
      errors
    }
  }

  /**
   * Check if API is available
   */
  async checkApiAvailability(): Promise<boolean> {
    try {
      // Try to fetch questions (without error handling for this specific call)
      await fetch('/api/quiz/questions')
      return true
    } catch (error) {
      console.error('API not available:', error)
      return false
    }
  }

  /**
   * Get quiz settings
   */
  async getQuizSettings(): Promise<{
    timeLimit: number
    requiresAllQuestions: boolean
    allowMultipleCorrect: boolean
  } | null> {
    try {
      const data = await quizApi.getQuestions()
      return data.quizSettings
    } catch (error) {
      console.error('Error fetching quiz settings:', error)
      // Return default settings
      return {
        timeLimit: 10, // 10 minutes
        requiresAllQuestions: true,
        allowMultipleCorrect: true
      }
    }
  }
}

// Export singleton instance
export const quizService = new QuizService()

// Export types for external use
export type { QuizSubmission }
</file>

<file path="src/pages/api/quiz/submit.ts">
import type { NextApiRequest, NextApiResponse } from 'next'
import { Question, QuizAnswer, QuizResult } from '@/types/quiz'
import { storage } from '@/lib/storage'

interface SubmitRequest {
  userInfo: {
    name: string
    studentNumber: string
    classNumber: string
  }
  answers: QuizAnswer[]
  questions: Question[]
  startTime: number
  endTime: number
  timeExpired?: boolean
}

interface SubmitResponse {
  success: boolean
  message: string
  data?: {
    result: QuizResult
    summary: {
      totalQuestions: number
      correctAnswers: number
      incorrectAnswers: number
      score: number
      percentage: number
      timeSpent: number
      completedAt: string
    }
  }
  error?: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<SubmitResponse>
) {
  // Only allow POST method
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST'])
    return res.status(405).json({
      success: false,
      message: 'Method not allowed',
      error: 'Only POST requests are supported'
    })
  }

  try {
    const { userInfo, answers, questions, startTime, endTime, timeExpired = false }: SubmitRequest = req.body

    // Validate required fields
    if (!userInfo || !answers || !questions || !startTime || !endTime) {
      return res.status(400).json({
        success: false,
        message: 'Missing required fields',
        error: 'userInfo, answers, questions, startTime, and endTime are required'
      })
    }

    // Validate user information
    if (!userInfo.name || !userInfo.studentNumber || !userInfo.classNumber) {
      return res.status(400).json({
        success: false,
        message: 'Invalid user information',
        error: 'All user fields (name, studentNumber, classNumber) are required'
      })
    }

    // Validate time range
    const timeSpent = endTime - startTime
    const maxAllowedTime = 10 * 60 * 1000 // 10 minutes in milliseconds

    if (timeSpent < 0 || timeSpent > maxAllowedTime) {
      return res.status(400).json({
        success: false,
        message: 'Invalid time range',
        error: 'Time spent must be within the allowed quiz duration'
      })
    }

    // Validate questions
    if (questions.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'No quiz questions available for grading',
        error: 'Quiz questions not found'
      })
    }

    // Verify answers and calculate results
    const result = verifyAnswers(questions, answers)

    // Calculate summary statistics
    const totalQuestions = questions.length
    const correctAnswers = result.answers.filter(a => a.isCorrect).length
    const incorrectAnswers = totalQuestions - correctAnswers
    const score = correctAnswers
    const percentage = Math.round((correctAnswers / totalQuestions) * 100)

    const summary = {
      totalQuestions,
      correctAnswers,
      incorrectAnswers,
      score,
      percentage,
      timeSpent: Math.round(timeSpent / 1000), // Convert to seconds
      completedAt: new Date(endTime).toISOString()
    }

    // Create quiz result
    const quizResult: QuizResult = {
      score,
      totalQuestions,
      correctAnswers,
      timeSpent: Math.round(timeSpent / 1000),
      answers: result.answers
    }

    // Store result (in production, this would go to a database)
    const submissionData = {
      userInfo,
      result: quizResult,
      summary,
      submittedAt: new Date().toISOString(),
      timeExpired
    }

    // Here you would save to database
    console.log('Quiz submission:', submissionData)

    return res.status(200).json({
      success: true,
      message: timeExpired
        ? 'Quiz submitted automatically due to time limit'
        : 'Quiz submitted successfully',
      data: {
        result: quizResult,
        summary
      }
    })

  } catch (error) {
    console.error('Error submitting quiz:', error)
    return res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: 'Failed to submit quiz'
    })
  }
}

function verifyAnswers(questions: Question[], userAnswers: QuizAnswer[]): {
  answers: Array<{
    questionId: string
    question: string
    selectedAnswer: string
    correctAnswer: string
    isCorrect: boolean
  }>
} {
  const results = []

  for (const question of questions) {
    const userAnswer = userAnswers.find(answer => answer.questionId === question.id)

    // Get the correct answer(s) for this question
    const correctAnswers = question.answers.filter(answer => answer.isCorrect)
    const correctAnswerIds = correctAnswers.map(answer => answer.id)

    // Default values for unanswered questions
    let selectedAnswerText = 'Not answered'
    let isCorrect = false

    if (userAnswer) {
      const selectedAnswerObj = question.answers.find(answer => answer.id === userAnswer.answerId)
      selectedAnswerText = selectedAnswerObj?.text || 'Invalid answer'
      isCorrect = correctAnswerIds.includes(userAnswer.answerId)
    }

    results.push({
      questionId: question.id,
      question: question.question,
      selectedAnswer: selectedAnswerText,
      correctAnswer: correctAnswers.map(answer => answer.text).join(', '),
      isCorrect
    })
  }

  return { answers: results }
}
</file>

<file path="src/pages/_document.tsx">
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <link
          href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  reactStrictMode: true,
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
};

export default nextConfig;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/pages/api-reference/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn-pages-router) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/pages/building-your-application/deploying) for more details.
# fmib-quiz
</file>

<file path="src/components/layout/Footer.tsx">
export default function Footer() {
  return (
    <footer className="border-t border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800">
      <div className="container mx-auto px-4 py-6">
        <div className="flex flex-col items-center space-y-2 text-sm text-gray-600 dark:text-gray-400">
          <p>© 2025 Ứng dụng trắc nghiệm FMIB</p>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="src/components/layout/Header.tsx">
import Link from "next/link";
import { useRouter } from "next/router";

interface HeaderProps {
  title?: string;
}

export default function Header({ title = "FMIB Quiz" }: HeaderProps) {
  const router = useRouter();
  const pathname = router.pathname;

  return (
    <header className="bg-blue-600 dark:bg-blue-800 shadow-sm border-b border-blue-700 dark:border-blue-900">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16 md:h-20">
          <Link href="/" className="flex items-center flex-1 justify-center md:justify-start">
            <img
              src="/fmib-banner.png"
              alt="FMIB Quiz"
              className="h-10 w-auto object-contain md:h-12 lg:h-14 max-w-full"
            />
          </Link>

          <nav className="hidden md:flex space-x-6">
            <Link
              href="/quiz"
              className={`text-sm font-medium transition-colors hover:text-white ${
                pathname === "/quiz"
                  ? "text-white"
                  : "text-blue-100 dark:text-blue-200"
              }`}
            >
              Làm bài trắc nghiệm
            </Link>
            <Link
              href="/admin"
              className={`text-sm font-medium transition-colors hover:text-white ${
                pathname === "/admin"
                  ? "text-white"
                  : "text-blue-100 dark:text-blue-200"
              }`}
            >
              Quản trị
            </Link>
          </nav>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/lib/api.ts">
import { Question, QuizAnswer, QuizResult, UserInfo } from "@/types/quiz";

// API base configuration
const API_BASE = "/api";

// API response interfaces
interface ApiResponse<T = unknown> {
  success: boolean;
  message: string;
  data?: T;
  error?: string;
  meta?: {
    timestamp: string;
    version: string;
  };
}

interface QuestionsResponse {
  questions: Question[];
  totalQuestions: number;
  quizSettings: {
    timeLimit: number;
    requiresAllQuestions: boolean;
    allowMultipleCorrect: boolean;
  };
}

interface SubmitRequest {
  userInfo: UserInfo;
  answers: QuizAnswer[];
  questions: Question[];
  startTime: number;
  endTime: number;
  timeExpired?: boolean;
}

interface SubmitResponse {
  result: QuizResult;
  summary: {
    totalQuestions: number;
    correctAnswers: number;
    incorrectAnswers: number;
    score: number;
    percentage: number;
    timeSpent: number;
    completedAt: string;
  };
}

// API error class
export class ApiError extends Error {
  constructor(
    message: string,
    public status: number,
    public data?: unknown,
  ) {
    super(message);
    this.name = "ApiError";
  }
}

// Utility function for making API requests
async function apiRequest<T = unknown>(
  endpoint: string,
  options: RequestInit = {},
): Promise<T> {
  const url = `${API_BASE}${endpoint}`;

  const config: RequestInit = {
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
    ...options,
  };

  try {
    const response = await fetch(url, config);
    const data: ApiResponse<T> = await response.json();

    if (!response.ok) {
      throw new ApiError(
        data.message || `HTTP error! status: ${response.status}`,
        response.status,
        data,
      );
    }

    if (!data.success) {
      throw new ApiError(
        data.error || data.message || "API request failed",
        response.status,
        data,
      );
    }

    return data.data as T;
  } catch (error) {
    if (error instanceof ApiError) {
      throw error;
    }

    // Handle network errors or JSON parsing errors
    throw new ApiError("Network error occurred", 0, { originalError: error });
  }
}

// API functions
export const quizApi = {
  /**
   * Fetch quiz questions
   */
  async getQuestions(): Promise<QuestionsResponse> {
    return apiRequest<QuestionsResponse>("/quiz/questions", {
      method: "GET",
    });
  },

  /**
   * Submit quiz answers
   */
  async submitQuiz(submissionData: SubmitRequest): Promise<SubmitResponse> {
    return apiRequest<SubmitResponse>("/quiz/submit", {
      method: "POST",
      body: JSON.stringify(submissionData),
    });
  },
};

// Utility functions for error handling
export const handleApiError = (error: unknown): string => {
  if (error instanceof ApiError) {
    // Client error (4xx)
    if (error.status >= 400 && error.status < 500) {
      switch (error.status) {
        case 400:
          return "Invalid request. Please check your input and try again.";
        case 404:
          return "The requested resource was not found.";
        case 405:
          return "Method not allowed. Please refresh and try again.";
        default:
          return error.data?.error || error.message || "Invalid request";
      }
    }

    // Server error (5xx)
    if (error.status >= 500) {
      return "Server error occurred. Please try again later.";
    }

    // Network error
    if (error.status === 0) {
      return "Network error. Please check your connection and try again.";
    }

    return error.message || "An unexpected error occurred";
  }

  return "An unexpected error occurred";
};

// Type guards for API responses
export const isQuestionsResponse = (
  data: unknown,
): data is QuestionsResponse => {
  return (
    data &&
    typeof data === "object" &&
    Array.isArray(data.questions) &&
    typeof data.totalQuestions === "number" &&
    typeof data.quizSettings === "object"
  );
};

export const isSubmitResponse = (data: unknown): data is SubmitResponse => {
  return (
    data &&
    typeof data === "object" &&
    typeof data.result === "object" &&
    typeof data.summary === "object"
  );
};
</file>

<file path="src/lib/blob-storage.ts">
import { Question } from './storage';
import { checkBlobStorageConfig, devFallbackStorage, showDevWarning } from './dev-storage';

// Show development warning on module load
if (typeof window !== 'undefined') {
  showDevWarning();
}

// Blob storage configuration (constants moved to API route)

// Error handling utility
class BlobStorageError extends Error {
  constructor(message: string, public cause?: Error) {
    super(message);
    this.name = 'BlobStorageError';
  }
}

// Default questions fallback
const getDefaultQuestions = (): Question[] => [
  {
    id: 'default-1',
    question: 'What is the capital of France?',
    answers: [
      { id: 'a1', text: 'London', isCorrect: false },
      { id: 'a2', text: 'Berlin', isCorrect: false },
      { id: 'a3', text: 'Paris', isCorrect: true },
      { id: 'a4', text: 'Madrid', isCorrect: false }
    ]
  },
  {
    id: 'default-2',
    question: 'What is 2 + 2?',
    answers: [
      { id: 'a1', text: '3', isCorrect: false },
      { id: 'a2', text: '4', isCorrect: true },
      { id: 'a3', text: '5', isCorrect: false },
      { id: 'a4', text: '22', isCorrect: false }
    ]
  }
];

// Blob storage utility functions
export const blobStorage = {
  /**
   * Check if blob storage is properly configured
   */
  isConfigured: (): boolean => {
    const config = checkBlobStorageConfig();
    return config.isConfigured;
  },

  /**
   * Save questions to Vercel Blob storage (via API)
   */
  saveQuestions: async (questions: Question[]): Promise<{ url: string; uploadedAt: Date }> => {
    // Check configuration first
    const config = checkBlobStorageConfig();
    if (!config.isConfigured) {
      if (config.canProceed) {
        console.log(config.message);
        // Fallback to localStorage for development
        devFallbackStorage.saveQuestions(questions);
        return {
          url: 'localStorage-fallback',
          uploadedAt: new Date()
        };
      } else {
        throw new BlobStorageError(config.message);
      }
    }

    try {
      // Validate questions structure
      if (!Array.isArray(questions)) {
        throw new BlobStorageError('Questions must be an array');
      }

      // Validate each question
      for (const question of questions) {
        if (!question.id || !question.question || !Array.isArray(question.answers)) {
          throw new BlobStorageError('Invalid question structure detected');
        }

        if (question.answers.length < 2) {
          throw new BlobStorageError('Each question must have at least 2 answers');
        }

        const hasCorrectAnswer = question.answers.some(answer => answer.isCorrect);
        if (!hasCorrectAnswer) {
          throw new BlobStorageError('Each question must have at least one correct answer');
        }
      }

      console.log(`📤 Saving ${questions.length} questions via API...`);

      // Call API to save questions
      const response = await fetch('/api/blob-questions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ questions }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new BlobStorageError(result.error || result.message || 'Failed to save questions');
      }

      console.log(`✅ Successfully saved ${questions.length} questions via API`);
      return {
        url: result.data?.url || 'api-success',
        uploadedAt: result.data?.uploadedAt ? new Date(result.data.uploadedAt) : new Date()
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('❌ Error saving questions via API:', {
        error: errorMessage,
        stack: error instanceof Error ? error.stack : undefined,
        questionsCount: questions.length,
        timestamp: new Date().toISOString()
      });

      // Enhanced error analysis
      if (errorMessage.includes('401') || errorMessage.includes('403')) {
        console.error('🔑 Permission denied - Check your BLOB_READ_WRITE_TOKEN');
      } else if (errorMessage.includes('404')) {
        console.error('🏪 Blob store not found - Create a blob store in Vercel dashboard');
      } else if (errorMessage.includes('fetch') || errorMessage.includes('ENOTFOUND')) {
        console.error('🌐 Network error - Check your internet connection');
      } else if (errorMessage.includes('Failed to fetch')) {
        console.error('🌐 API request failed - Check server is running');
      }

      if (error instanceof BlobStorageError) {
        throw error;
      }

      throw new BlobStorageError('Failed to save questions via API', error as Error);
    }
  },

  /**
   * Get questions from Vercel Blob storage (via API)
   */
  getQuestions: async (): Promise<Question[]> => {
    // Check configuration first
    const config = checkBlobStorageConfig();
    if (!config.isConfigured) {
      if (config.canProceed) {
        console.log(config.message);
        // Fallback to localStorage for development
        return devFallbackStorage.getQuestions();
      } else {
        throw new BlobStorageError(config.message);
      }
    }

    try {
      console.log('📥 Loading questions via API...');

      // Call API to get questions
      const response = await fetch('/api/blob-questions', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || result.message || 'API returned error');
      }

      const questions = result.data;

      console.log(`✅ Successfully loaded ${questions.length} questions via API (${result.source})`);
      return questions;

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('❌ Error loading questions via API:', {
        error: errorMessage,
        stack: error instanceof Error ? error.stack : undefined,
        timestamp: new Date().toISOString()
      });

      // Enhanced error analysis
      if (errorMessage.includes('401') || errorMessage.includes('403')) {
        console.error('🔑 Permission denied - Check your BLOB_READ_WRITE_TOKEN');
      } else if (errorMessage.includes('404')) {
        console.error('🏪 Blob store not found - Create a blob store in Vercel dashboard');
      } else if (errorMessage.includes('fetch') || errorMessage.includes('ENOTFOUND')) {
        console.error('🌐 Network error - Check your internet connection');
      } else if (errorMessage.includes('Failed to fetch')) {
        console.error('🌐 API request failed - Check server is running');
      }

      console.log('📝 Using default questions as fallback');
      return getDefaultQuestions();
    }
  },

  /**
   * Delete questions from blob storage (via API)
   */
  deleteQuestions: async (): Promise<void> => {
    try {
      console.log('🗑️ Deleting questions via API...');

      const response = await fetch('/api/blob-questions', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || result.message || 'Failed to delete questions');
      }

      console.log('✅ Successfully deleted questions via API');

    } catch (error) {
      console.error('❌ Error deleting questions via API:', error);
      throw new BlobStorageError('Failed to delete questions via API', error as Error);
    }
  }
};

// Export types for external use
export type { Question };

// Utility function for migrating from localStorage to blob storage
export const migrateFromLocalStorage = async (): Promise<{
  success: boolean;
  message: string;
  questionsMigrated: number;
}> => {
  try {
    if (typeof window === 'undefined') {
      return {
        success: false,
        message: 'Migration can only be performed in the browser',
        questionsMigrated: 0
      };
    }

    // Get questions from localStorage
    const questionsData = localStorage.getItem('fmib_quiz_questions');

    if (!questionsData) {
      return {
        success: false,
        message: 'No questions found in localStorage to migrate',
        questionsMigrated: 0
      };
    }

    const questions: Question[] = JSON.parse(questionsData);

    if (!Array.isArray(questions) || questions.length === 0) {
      return {
        success: false,
        message: 'Invalid questions data in localStorage',
        questionsMigrated: 0
      };
    }

    // Save to blob storage
    await blobStorage.saveQuestions(questions);

    // Clear localStorage questions (optional)
    localStorage.removeItem('fmib_quiz_questions');

    return {
      success: true,
      message: `Successfully migrated ${questions.length} questions to blob storage`,
      questionsMigrated: questions.length
    };

  } catch (error) {
    console.error('❌ Error migrating from localStorage:', error);
    return {
      success: false,
      message: `Migration failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
      questionsMigrated: 0
    };
  }
};
</file>

<file path="src/pages/api/blob-questions.ts">
import type { NextApiRequest, NextApiResponse } from 'next'
import { put, list, del } from '@vercel/blob'
import { Question } from '@/types/quiz'

const QUIZ_QUESTIONS_BLOB = 'quiz-questions.json'

// Default questions fallback
const getDefaultQuestions = (): Question[] => [
  {
    id: 'default-1',
    question: 'What is the capital of France?',
    answers: [
      { id: 'a1', text: 'London', isCorrect: false },
      { id: 'a2', text: 'Berlin', isCorrect: false },
      { id: 'a3', text: 'Paris', isCorrect: true },
      { id: 'a4', text: 'Madrid', isCorrect: false }
    ]
  },
  {
    id: 'default-2',
    question: 'What is 2 + 2?',
    answers: [
      { id: 'a1', text: '3', isCorrect: false },
      { id: 'a2', text: '4', isCorrect: true },
      { id: 'a3', text: '5', isCorrect: false },
      { id: 'a4', text: '22', isCorrect: false }
    ]
  }
]

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Debug: Log the environment variable
  console.log('🔍 Debug - BLOB_READ_WRITE_TOKEN:', process.env.BLOB_READ_WRITE_TOKEN ? 'SET' : 'NOT SET');
  console.log('🔍 Debug - NODE_ENV:', process.env.NODE_ENV);

  // Check BLOB_READ_WRITE_TOKEN
  if (!process.env.BLOB_READ_WRITE_TOKEN) {
    return res.status(500).json({
      success: false,
      error: 'BLOB_READ_WRITE_TOKEN not configured',
      message: 'Server-side blob storage not properly configured'
    })
  }

  try {
    switch (req.method) {
      case 'GET':
        return await handleGet(req, res)
      case 'POST':
        return await handlePost(req, res)
      case 'DELETE':
        return await handleDelete(req, res)
      default:
        res.setHeader('Allow', ['GET', 'POST', 'DELETE'])
        return res.status(405).json({
          success: false,
          error: 'Method not allowed'
        })
    }
  } catch (error: any) {
    console.error('Blob API error:', error)
    return res.status(500).json({
      success: false,
      error: 'Internal server error',
      message: error.message
    })
  }
}

async function handleGet(req: NextApiRequest, res: NextApiResponse) {
  try {
    // List blobs to find our questions file
    const { blobs } = await list({ prefix: QUIZ_QUESTIONS_BLOB })

    if (blobs.length === 0) {
      console.log('📝 No questions found in blob storage, using default questions')
      return res.status(200).json({
        success: true,
        data: getDefaultQuestions(),
        source: 'default',
        message: 'Using default questions (no questions found in blob storage)'
      })
    }

    // Get the most recent version
    const questionsBlob = blobs[0]
    console.log(`📥 Fetching questions from: ${questionsBlob.url}`)

    const response = await fetch(questionsBlob.url)

    if (!response.ok) {
      throw new Error(`Failed to fetch questions: ${response.statusText}`)
    }

    const questions: Question[] = await response.json()

    // Validate the loaded questions
    if (!Array.isArray(questions) || questions.length === 0) {
      console.warn('⚠️ Invalid questions format in blob storage, using defaults')
      return res.status(200).json({
        success: true,
        data: getDefaultQuestions(),
        source: 'default',
        message: 'Using default questions (invalid format in blob storage)'
      })
    }

    console.log(`✅ Loaded ${questions.length} questions from blob storage`)
    return res.status(200).json({
      success: true,
      data: questions,
      source: 'blob',
      message: `Successfully loaded ${questions.length} questions from blob storage`
    })

  } catch (error) {
    console.error('❌ Error loading questions from blob storage:', error)
    console.log('📝 Using default questions as fallback')

    return res.status(200).json({
      success: true,
      data: getDefaultQuestions(),
      source: 'default',
      message: 'Using default questions (blob storage error)'
    })
  }
}

async function handlePost(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { questions } = req.body

    // Validate questions structure
    if (!Array.isArray(questions)) {
      return res.status(400).json({
        success: false,
        error: 'Questions must be an array'
      })
    }

    // Validate each question
    for (const question of questions) {
      if (!question.id || !question.question || !Array.isArray(question.answers)) {
        return res.status(400).json({
          success: false,
          error: 'Invalid question structure detected'
        })
      }

      if (question.answers.length < 2) {
        return res.status(400).json({
          success: false,
          error: 'Each question must have at least 2 answers'
        })
      }

      const hasCorrectAnswer = question.answers.some((answer: any) => answer.isCorrect)
      if (!hasCorrectAnswer) {
        return res.status(400).json({
          success: false,
          error: 'Each question must have at least one correct answer'
        })
      }
    }

    // Create backup before saving new version
    await createBackup(questions)

    // Save to blob storage
    const blob = await put(QUIZ_QUESTIONS_BLOB, JSON.stringify(questions, null, 2), {
      access: 'public',
      contentType: 'application/json',
      allowOverwrite: true,
    })

    console.log(`✅ Saved ${questions.length} questions to blob storage`)
    return res.status(200).json({
      success: true,
      message: `Successfully saved ${questions.length} questions`,
      data: {
        url: blob.url,
        uploadedAt: new Date().toISOString()
      }
    })

  } catch (error: any) {
    console.error('❌ Error saving questions to blob storage:', error)

    // Enhanced error analysis
    if (error.message.includes('401') || error.message.includes('403')) {
      return res.status(403).json({
        success: false,
        error: 'Permission denied',
        message: 'Check your BLOB_READ_WRITE_TOKEN permissions'
      })
    }

    if (error.message.includes('404')) {
      return res.status(404).json({
        success: false,
        error: 'Blob store not found',
        message: 'Ensure you created a blob store in Vercel dashboard'
      })
    }

    return res.status(500).json({
      success: false,
      error: 'Failed to save questions',
      message: error.message
    })
  }
}

async function handleDelete(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { blobs } = await list({ prefix: QUIZ_QUESTIONS_BLOB })

    if (blobs.length > 0) {
      await del(blobs.map(blob => blob.url))
      console.log('🗑️ Deleted questions from blob storage')
    }

    return res.status(200).json({
      success: true,
      message: 'Questions deleted successfully'
    })

  } catch (error: any) {
    console.error('❌ Error deleting questions from blob storage:', error)
    return res.status(500).json({
      success: false,
      error: 'Failed to delete questions',
      message: error.message
    })
  }
}

async function createBackup(questions: Question[]) {
  try {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupFilename = `quiz-questions-backup-${timestamp}.json`;

    await put(backupFilename, JSON.stringify(questions, null, 2), {
      access: 'public',
      contentType: 'application/json',
    });

    console.log(`💾 Created backup: ${backupFilename}`);
  } catch (error) {
    console.warn('⚠️ Failed to create backup:', error);
    // Don't throw here - backup failure shouldn't stop the main operation
  }
}
</file>

<file path="src/pages/api/debug-blob.ts">
import type { NextApiRequest, NextApiResponse } from 'next'
import { put, list } from '@vercel/blob'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  // Log to Vercel function logs (visible in dashboard)
  console.log('=== ENV DEBUG START ===');
  console.log('NODE_ENV:', process.env.NODE_ENV);
  console.log('BLOB_READ_WRITE_TOKEN present:', !!process.env.BLOB_READ_WRITE_TOKEN && process.env.BLOB_READ_WRITE_TOKEN.length > 0 ? 'YES' : 'NO (EMPTY OR MISSING)');
  console.log('BLOB_READ_WRITE_TOKEN length:', process.env.BLOB_READ_WRITE_TOKEN ? process.env.BLOB_READ_WRITE_TOKEN.length : 0); // Length only, not value
  console.log('All env keys (non-sensitive):', Object.keys(process.env).filter(key => !key.includes('TOKEN') && !key.includes('KEY') && !key.includes('SECRET')));
  console.log('=== ENV DEBUG END ===');

  // Return a safe summary (no sensitive data)
  const envSummary: any = {
    nodeEnv: process.env.NODE_ENV,
    blobTokenPresent: !!process.env.BLOB_READ_WRITE_TOKEN && process.env.BLOB_READ_WRITE_TOKEN.length > 0,
    totalEnvVars: Object.keys(process.env).length,
    sampleNonSensitive: Object.keys(process.env).filter(key => key.startsWith('NEXT_')).slice(0, 3), // Example non-sensitive keys
    timestamp: new Date().toISOString(),
    tests: {} as any
  };

  try {
    // Test 1: Token validation
    envSummary.tests.tokenValidation = {
      success: envSummary.blobTokenPresent,
      message: envSummary.blobTokenPresent
        ? `Token present and properly configured`
        : 'Token missing or empty'
    }

    if (!envSummary.blobTokenPresent) {
      return res.status(400).json({
        ...envSummary,
        error: 'BLOB_READ_WRITE_TOKEN not configured',
        recommendations: ['Add BLOB_READ_WRITE_TOKEN to environment variables in Vercel dashboard']
      })
    }

    // Test 2: List operation
    try {
      const result = await list()
      envSummary.tests.listTest = {
        success: true,
        message: `Successfully listed ${result.blobs.length} blobs`,
        details: {
          blobCount: result.blobs.length,
          blobNames: result.blobs.map(b => b.pathname)
        }
      }
    } catch (error: any) {
      envSummary.tests.listTest = {
        success: false,
        message: 'List operation failed',
        error: error.message
      }
    }

    // Test 3: Put operation (only if list succeeded)
    if (envSummary.tests.listTest.success) {
      try {
        const testData = { test: true, timestamp: new Date().toISOString() }
        const blob = await put('debug-test.json', JSON.stringify(testData), {
          access: 'public',
          contentType: 'application/json'
        })

        envSummary.tests.putTest = {
          success: true,
          message: 'Successfully created test file',
          details: {
            url: blob.url,
            uploadedAt: new Date().toISOString()
          }
        }

        // Clean up - delete the test file
        try {
          const { del } = await import('@vercel/blob')
          await del(blob.url)
          envSummary.tests.cleanupTest = {
            success: true,
            message: 'Successfully cleaned up test file'
          }
        } catch (cleanupError) {
          envSummary.tests.cleanupTest = {
            success: false,
            message: 'Failed to cleanup test file',
            error: (cleanupError as Error).message
          }
        }

      } catch (error: any) {
        envSummary.tests.putTest = {
          success: false,
          message: 'Put operation failed',
          error: error.message
        }
      }
    }

    // Generate recommendations
    const recommendations = []
    if (!envSummary.blobTokenPresent) {
      recommendations.push('Add BLOB_READ_WRITE_TOKEN to environment variables')
    }
    if (!envSummary.tests.listTest.success) {
      if (envSummary.tests.listTest.error?.includes('401') || envSummary.tests.listTest.error?.includes('403')) {
        recommendations.push('Check your BLOB_READ_WRITE_TOKEN permissions')
        recommendations.push('Regenerate the token in Vercel dashboard')
      }
      if (envSummary.tests.listTest.error?.includes('404')) {
        recommendations.push('Create a blob store in Vercel dashboard')
      }
    }
    if (!envSummary.tests.putTest.success && envSummary.tests.listTest.success) {
      recommendations.push('Check write permissions for your blob store')
    }

    envSummary.recommendations = recommendations

    return res.status(200).json(envSummary)

  } catch (error: any) {
    console.error('Debug API error:', error)
    return res.status(500).json({
      ...envSummary,
      error: 'Internal server error during debug',
      details: error.message
    })
  }
}
</file>

<file path="src/lib/storage.ts">
// Quiz data types
export interface QuizAnswer {
  questionId: string
  answerId: string
}

export interface UserInfo {
  name: string
  studentNumber: string
  classNumber: string
  major: string
}

export interface QuizSession {
  userInfo: UserInfo
  answers: QuizAnswer[]
  startTime: number
  currentQuestionIndex: number
  isCompleted: boolean
}

export interface Question {
  id: string
  question: string
  answers: Array<{
    id: string
    text: string
    isCorrect: boolean
  }>
}

// Local storage keys
export const STORAGE_KEYS = {
  QUIZ_SESSION: 'fmib_quiz_session',
  QUIZ_QUESTIONS: 'fmib_quiz_questions',
  USER_ANSWERS: 'fmib_user_answers'
} as const

// In-memory cache for user answers
let userAnswersCache: QuizAnswer[] | null = null
let answersCacheTimestamp = 0
const CACHE_DURATION = 100 // 100ms cache duration

// Local storage utility functions
export const storage = {
  // Quiz session management
  saveQuizSession: (session: QuizSession): void => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(STORAGE_KEYS.QUIZ_SESSION, JSON.stringify(session))
    }
  },

  getQuizSession: (): QuizSession | null => {
    if (typeof window !== 'undefined') {
      const sessionData = localStorage.getItem(STORAGE_KEYS.QUIZ_SESSION)
      return sessionData ? JSON.parse(sessionData) : null
    }
    return null
  },

  clearQuizSession: (): void => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(STORAGE_KEYS.QUIZ_SESSION)
      localStorage.removeItem(STORAGE_KEYS.USER_ANSWERS)
      // Clear cache
      userAnswersCache = null
      answersCacheTimestamp = 0
    }
  },

  // User answers management with caching
  saveUserAnswer: (answer: QuizAnswer): void => {
    if (typeof window !== 'undefined') {
      // Update cache immediately
      if (!userAnswersCache) {
        userAnswersCache = storage.getUserAnswers()
      }
      const updatedAnswers = userAnswersCache.filter(a => a.questionId !== answer.questionId)
      updatedAnswers.push(answer)
      userAnswersCache = updatedAnswers
      answersCacheTimestamp = Date.now()

      // Save to localStorage asynchronously
      localStorage.setItem(STORAGE_KEYS.USER_ANSWERS, JSON.stringify(updatedAnswers))
    }
  },

  getUserAnswers: (): QuizAnswer[] => {
    if (typeof window !== 'undefined') {
      const now = Date.now()

      // Return cached data if still valid
      if (userAnswersCache && (now - answersCacheTimestamp) < CACHE_DURATION) {
        return userAnswersCache
      }

      // Load from localStorage and update cache
      const answersData = localStorage.getItem(STORAGE_KEYS.USER_ANSWERS)
      userAnswersCache = answersData ? JSON.parse(answersData) : []
      answersCacheTimestamp = now
      return userAnswersCache
    }
    return []
  },

  clearUserAnswers: (): void => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(STORAGE_KEYS.USER_ANSWERS)
      // Clear cache
      userAnswersCache = null
      answersCacheTimestamp = 0
    }
  },

  // Questions management
  saveQuestions: (questions: Question[]): void => {
    if (typeof window !== 'undefined') {
      localStorage.setItem(STORAGE_KEYS.QUIZ_QUESTIONS, JSON.stringify(questions))
    }
  },

  getQuestions: (): Question[] => {
    if (typeof window !== 'undefined') {
      const questionsData = localStorage.getItem(STORAGE_KEYS.QUIZ_QUESTIONS)
      return questionsData ? JSON.parse(questionsData) : []
    }
    return []
  },

  clearQuestions: (): void => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(STORAGE_KEYS.QUIZ_QUESTIONS)
    }
  },

  // Comprehensive cleanup function
  clearAllQuizData: (): void => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(STORAGE_KEYS.QUIZ_SESSION)
      localStorage.removeItem(STORAGE_KEYS.USER_ANSWERS)
      localStorage.removeItem(STORAGE_KEYS.QUIZ_QUESTIONS)
    }
  },

  // Get storage usage information
  getStorageInfo: (): { used: number, available: number, items: number } => {
    if (typeof window === 'undefined') {
      return { used: 0, available: 0, items: 0 }
    }

    let used = 0
    let items = 0
    for (const key in localStorage) {
      if (localStorage.hasOwnProperty(key) && key.startsWith('fmib_quiz_')) {
        used += localStorage[key].length
        items++
      }
    }

    // Rough estimate of available space (most browsers limit to 5-10MB)
    const available = 5 * 1024 * 1024 // 5MB

    return { used, available, items }
  },

  // Cleanup expired sessions
  cleanupExpiredSessions: (): number => {
    if (typeof window === 'undefined') return 0

    let cleaned = 0
    try {
      const sessionData = localStorage.getItem(STORAGE_KEYS.QUIZ_SESSION)
      if (sessionData) {
        const session = JSON.parse(sessionData)
        if (isSessionExpired(session.startTime)) {
          localStorage.removeItem(STORAGE_KEYS.QUIZ_SESSION)
          localStorage.removeItem(STORAGE_KEYS.USER_ANSWERS)
          cleaned++
        }
      }
    } catch (error) {
      console.error('Error cleaning up expired sessions:', error)
    }

    return cleaned
  }
}

// Helper function to check if session is expired (10 minutes)
export const isSessionExpired = (startTime: number): boolean => {
  const SESSION_DURATION = 10 * 60 * 1000 // 10 minutes in milliseconds
  return Date.now() - startTime > SESSION_DURATION
}

// Helper function to get remaining time
export const getRemainingTime = (startTime: number): number => {
  const SESSION_DURATION = 10 * 60 * 1000 // 10 minutes in milliseconds
  const elapsed = Date.now() - startTime
  const remainingMs = Math.max(0, SESSION_DURATION - elapsed)
  return Math.ceil(remainingMs / 1000) // Convert to seconds and round up
}
</file>

<file path="src/pages/api/quiz/questions.ts">
import type { NextApiRequest, NextApiResponse } from 'next'
import { Question } from '@/types/quiz'
import { list } from '@vercel/blob'

// Mock questions for development when localStorage is not available
function getMockQuestions(): Question[] {
  return [
    {
      id: 'q1',
      question: 'What is the capital of France?',
      answers: [
        { id: 'a1', text: 'London', isCorrect: false },
        { id: 'a2', text: 'Berlin', isCorrect: false },
        { id: 'a3', text: 'Paris', isCorrect: true },
        { id: 'a4', text: 'Madrid', isCorrect: false }
      ]
    },
    {
      id: 'q2',
      question: 'Which planet is known as the Red Planet?',
      answers: [
        { id: 'a5', text: 'Venus', isCorrect: false },
        { id: 'a6', text: 'Mars', isCorrect: true },
        { id: 'a7', text: 'Jupiter', isCorrect: false },
        { id: 'a8', text: 'Saturn', isCorrect: false }
      ]
    },
    {
      id: 'q3',
      question: 'What is 2 + 2?',
      answers: [
        { id: 'a9', text: '3', isCorrect: false },
        { id: 'a10', text: '4', isCorrect: true },
        { id: 'a11', text: '5', isCorrect: false },
        { id: 'a12', text: '22', isCorrect: false }
      ]
    },
    {
      id: 'q4',
      question: 'Who painted the Mona Lisa?',
      answers: [
        { id: 'a13', text: 'Vincent van Gogh', isCorrect: false },
        { id: 'a14', text: 'Pablo Picasso', isCorrect: false },
        { id: 'a15', text: 'Leonardo da Vinci', isCorrect: true },
        { id: 'a16', text: 'Michelangelo', isCorrect: false }
      ]
    },
    {
      id: 'q5',
      question: 'What is the largest ocean on Earth?',
      answers: [
        { id: 'a17', text: 'Atlantic Ocean', isCorrect: false },
        { id: 'a18', text: 'Indian Ocean', isCorrect: false },
        { id: 'a19', text: 'Arctic Ocean', isCorrect: false },
        { id: 'a20', text: 'Pacific Ocean', isCorrect: true }
      ]
    }
  ]
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Only allow GET method
  if (req.method !== 'GET') {
    res.setHeader('Allow', ['GET'])
    return res.status(405).json({
      success: false,
      message: 'Method not allowed',
      error: 'Only GET requests are supported'
    })
  }

  // Check BLOB_READ_WRITE_TOKEN
  if (!process.env.BLOB_READ_WRITE_TOKEN) {
    console.log('📝 BLOB_READ_WRITE_TOKEN not configured, using mock questions')
    const questions = getMockQuestions()
    return sendQuestionsResponse(res, questions, 'mock')
  }

  try {
    // Get questions from blob storage directly (server-side)
    console.log('📥 Fetching questions from Vercel Blob storage...')

    const QUIZ_QUESTIONS_BLOB = 'quiz-questions.json'
    const { blobs } = await list({ prefix: QUIZ_QUESTIONS_BLOB })

    let questions: Question[]

    if (blobs.length === 0) {
      console.log('📝 No questions found in blob storage, using mock questions')
      questions = getMockQuestions()
    } else {
      // Get the most recent version
      const questionsBlob = blobs[0]
      console.log(`📥 Fetching questions from: ${questionsBlob.url}`)

      const response = await fetch(questionsBlob.url)

      if (!response.ok) {
        throw new Error(`Failed to fetch questions: ${response.statusText}`)
      }

      questions = await response.json()

      // Validate the loaded questions
      if (!Array.isArray(questions) || questions.length === 0) {
        console.warn('⚠️ Invalid questions format in blob storage, using mock questions')
        questions = getMockQuestions()
      } else {
        console.log(`✅ Loaded ${questions.length} questions from blob storage`)
      }
    }

    return sendQuestionsResponse(res, questions, blobs.length > 0 ? 'blob' : 'mock')

  } catch (error: any) {
    console.error('❌ Error loading questions from blob storage:', error)

    // Enhanced error analysis
    if (error.message.includes('401') || error.message.includes('403')) {
      console.error('🔑 Permission denied - Check your BLOB_READ_WRITE_TOKEN')
    } else if (error.message.includes('404')) {
      console.error('🏪 Blob store not found - Create a blob store in Vercel dashboard')
    }

    console.log('📝 Using mock questions as fallback')
    const questions = getMockQuestions()
    return sendQuestionsResponse(res, questions, 'mock')
  }
}

function sendQuestionsResponse(res: NextApiResponse, questions: Question[], source: string) {
  // Check if questions exist
  if (questions.length === 0) {
    return res.status(404).json({
      success: false,
      message: 'No quiz questions available',
      data: {
        questions: [],
        totalQuestions: 0
      }
    })
  }

  // Transform questions for API response (remove correct answers for security)
  const publicQuestions = questions.map(question => ({
    id: question.id,
    question: question.question,
    answers: question.answers.map(answer => ({
      id: answer.id,
      text: answer.text
      // Note: isCorrect is intentionally excluded for security
    }))
  }))

  return res.status(200).json({
    success: true,
    message: source === 'blob'
      ? 'Questions retrieved successfully from Vercel Blob storage'
      : 'Questions retrieved successfully (mock data)',
    data: {
      questions: publicQuestions,
      totalQuestions: questions.length,
      quizSettings: {
        timeLimit: 10, // 10 minutes
        requiresAllQuestions: true,
        allowMultipleCorrect: true
      },
      storageInfo: {
        type: source === 'blob' ? 'vercel-blob' : 'mock',
        persistent: source === 'blob',
        description: source === 'blob'
          ? 'Questions are stored in Vercel Blob storage and persist across deployments'
          : 'Using mock questions for development/testing'
      }
    },
    meta: {
      timestamp: new Date().toISOString(),
      version: '2.0.0',
      storageVersion: source === 'blob' ? 'blob-storage' : 'mock-data'
    }
  })
}
</file>

<file path="src/pages/debug-blob.tsx">
import type { NextPage } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import Layout from '@/components/layout/Layout'

interface EnvSummary {
  success: boolean
  nodeEnv: string
  blobTokenPresent: boolean
  totalEnvVars: number
  sampleNonSensitive: string[]
  timestamp: string
  tests: {
    tokenValidation: any
    listTest: any
    putTest: any
    cleanupTest?: any
  }
  recommendations: string[]
  error?: string
  details?: string
}

const DebugPage: NextPage = () => {
  const [envSummary, setEnvSummary] = useState<EnvSummary | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  const runDebugTest = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/debug-blob')
      const data = await response.json()

      if (!response.ok) {
        console.error('Debug API error:', data)
        setEnvSummary({
          success: false,
          nodeEnv: 'unknown',
          blobTokenPresent: false,
          totalEnvVars: 0,
          sampleNonSensitive: [],
          timestamp: new Date().toISOString(),
          tests: {
            tokenValidation: { success: false, message: 'API Error' },
            listTest: { success: false, message: 'API Error' },
            putTest: { success: false, message: 'API Error' }
          },
          recommendations: data.error ? [data.error] : [],
          error: data.error || 'API Error'
        })
      } else {
        setEnvSummary(data)
      }
    } catch (error) {
      console.error('Debug test failed:', error)
      setEnvSummary({
        success: false,
        nodeEnv: 'unknown',
        blobTokenPresent: false,
        totalEnvVars: 0,
        sampleNonSensitive: [],
        timestamp: new Date().toISOString(),
        tests: {
          tokenValidation: { success: false, message: 'Network Error' },
          listTest: { success: false, message: 'Network Error' },
          putTest: { success: false, message: 'Network Error' }
        },
        recommendations: ['Failed to connect to debug API', String(error)],
        error: 'Network error'
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <>
      <Head>
        <title>Blob Storage Debug - FMIB Quiz</title>
        <meta name="description" content="Debug Vercel Blob storage configuration" />
      </Head>

      <Layout title="Blob Storage Debug">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <div className="mb-8">
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                🔍 Vercel Blob Storage Debug
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                Debug and troubleshoot your Vercel Blob storage configuration
              </p>
            </div>

            {/* Environment Status Summary */}
            <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center justify-between">
                <span className="text-blue-800 font-medium">
                  🔍 Server-side environment variable debugging via API
                </span>
                {envSummary && (
                  <span className={`text-sm font-medium ${
                    envSummary.blobTokenPresent ? 'text-green-600' : 'text-red-600'
                  }`}>
                    {envSummary.blobTokenPresent ? '✅ Token Present' : '❌ Token Missing'}
                  </span>
                )}
              </div>
            </div>

            {/* Run Debug Button */}
            <div className="mb-8">
              <button
                onClick={runDebugTest}
                disabled={isLoading}
                className="px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Running Debug Tests...' : '🔍 Check Environment Variables'}
              </button>
            </div>

            {/* Debug Results */}
            {envSummary && (
              <div className="space-y-6">
                {/* Environment Info */}
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                  <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-4">
                    📊 Environment Information
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Environment:</span>
                      <p className="text-lg font-mono text-gray-900 dark:text-white">{envSummary.nodeEnv}</p>
                    </div>
                    <div>
                      <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Timestamp:</span>
                      <p className="text-sm font-mono text-gray-900 dark:text-white">{envSummary.timestamp}</p>
                    </div>
                    <div>
                      <span className="text-sm font-medium text-gray-600 dark:text-gray-400">BLOB Token Present:</span>
                      <p className="text-lg font-mono text-gray-900 dark:text-white">
                        {envSummary.blobTokenPresent ? '✅ Yes' : '❌ No'}
                      </p>
                    </div>
                    <div>
                      <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Total Env Vars:</span>
                      <p className="text-lg font-mono text-gray-900 dark:text-white">{envSummary.totalEnvVars}</p>
                    </div>
                    {envSummary.sampleNonSensitive.length > 0 && (
                      <div className="md:col-span-2">
                        <span className="text-sm font-medium text-gray-600 dark:text-gray-400">Sample Non-Sensitive Vars:</span>
                        <p className="text-sm font-mono text-gray-900 dark:text-white">
                          {envSummary.sampleNonSensitive.join(', ')}
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Test Results */}
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                  <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-4">
                    🧪 Test Results
                  </h2>
                  <div className="space-y-4">
                    {Object.entries(envSummary.tests).map(([testName, result]) => (
                      <div key={testName} className="border-l-4 pl-4 border-gray-200 dark:border-gray-600">
                        <div className="flex items-center mb-2">
                          <span className={`text-lg font-medium ${
                            result.success ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {result.success ? '✅' : '❌'} {testName}
                          </span>
                        </div>
                        <p className="text-gray-700 dark:text-gray-300">{result.message}</p>
                        {result.error && (
                          <p className="text-sm text-red-600 dark:text-red-400 mt-1">
                            Error: {result.error}
                          </p>
                        )}
                        {result.details && (
                          <details className="mt-2">
                            <summary className="text-sm text-blue-600 dark:text-blue-400 cursor-pointer">
                              Technical Details
                            </summary>
                            <pre className="text-xs text-gray-600 dark:text-gray-400 mt-2 bg-gray-50 dark:bg-gray-900 p-2 rounded overflow-x-auto">
                              {JSON.stringify(result.details, null, 2)}
                            </pre>
                          </details>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Recommendations */}
                {envSummary.recommendations.length > 0 && (
                  <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                    <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-4">
                      💡 Recommendations
                    </h2>
                    <div className="space-y-2">
                      {envSummary.recommendations.map((recommendation, index) => (
                        <div key={index} className="flex items-start">
                          <span className="text-blue-600 dark:text-blue-400 mr-2 mt-1">
                            {index + 1}.
                          </span>
                          <p className="text-gray-700 dark:text-gray-300">{recommendation}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Configuration Status */}
                <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                  <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-4">
                    ⚙️ Configuration Status
                  </h2>
                  <div className={`p-4 rounded-lg ${
                    envSummary.blobTokenPresent
                      ? 'bg-green-50 border border-green-200'
                      : 'bg-red-50 border border-red-200'
                  }`}>
                    <p className={`font-medium ${
                      envSummary.blobTokenPresent
                        ? 'text-green-800'
                        : 'text-red-800'
                    }`}>
                      {envSummary.blobTokenPresent
                        ? '✅ BLOB_READ_WRITE_TOKEN is properly configured!'
                        : '❌ BLOB_READ_WRITE_TOKEN is missing or empty. Check Vercel dashboard settings.'
                      }
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Manual Testing Section */}
            <div className="mt-8 bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
              <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-4">
                🛠️ Manual Testing Steps
              </h2>
              <ol className="list-decimal list-inside space-y-2 text-gray-700 dark:text-gray-300">
                <li>Check your Vercel dashboard → Storage → Blob stores</li>
                <li>Ensure you have a blob store created</li>
                <li>Copy the BLOB_READ_WRITE_TOKEN</li>
                <li>Add it to your environment variables</li>
                <li>Run the debug test above</li>
                <li>Try creating a test question in the admin panel</li>
              </ol>
            </div>

            {/* Environment Variables Info */}
            <div className="mt-6 bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg border border-blue-200 dark:border-blue-800">
              <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-2">
                📝 Environment Variables
              </h3>
              <div className="space-y-1 text-blue-700 dark:text-blue-300">
                <p><strong>Development:</strong> Add to .env.local file</p>
                <p><strong>Production:</strong> Set in Vercel dashboard → Settings → Environment Variables</p>
                <p><strong>Variable Name:</strong> BLOB_READ_WRITE_TOKEN</p>
              </div>
            </div>
          </div>
        </div>
      </Layout>
    </>
  )
}

export default DebugPage
</file>

<file path="src/pages/index.tsx">
import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect } from 'react'
import { useRouter } from 'next/router'
import Layout from '@/components/layout/Layout'

const HomePage: NextPage = () => {
  const router = useRouter()

  useEffect(() => {
    // Auto-redirect to quiz page
    router.push('/quiz')
  }, [router])
  return (
    <>
      <Head>
        <title>FMIB Quiz - Đang chuyển hướng...</title>
        <meta name="description" content="Đang chuyển hướng đến bài trắc nghiệm" />
      </Head>

      <Layout>
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600 dark:text-gray-400">
              Đang chuyển hướng đến bài trắc nghiệm...
            </p>
          </div>
        </div>
      </Layout>
    </>
  )
}

export default HomePage
</file>

<file path="src/styles/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

/* Animation keyframes */
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slide-up {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-down {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-left {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slide-right {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  10%, 30%, 50%, 70%, 90% {
    transform: translateX(-5px);
  }
  20%, 40%, 60%, 80% {
    transform: translateX(5px);
  }
}

/* Animation utility classes */
.animate-fade-in {
  animation: fade-in 0.5s ease-out forwards;
}

.animate-slide-up {
  animation: slide-up 0.5s ease-out forwards;
}

.animate-slide-down {
  animation: slide-down 0.5s ease-out forwards;
}

.animate-slide-left {
  animation: slide-left 0.5s ease-out forwards;
}

.animate-slide-right {
  animation: slide-right 0.5s ease-out forwards;
}

.animate-scale-in {
  animation: scale-in 0.3s ease-out forwards;
}

.animate-shake {
  animation: shake 0.5s ease-in-out;
}

/* Loading states */
.loading-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@media (prefers-color-scheme: dark) {
  .loading-skeleton {
    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
    background-size: 200% 100%;
  }
}

@keyframes loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* Focus and transition improvements */
* {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-duration: 200ms;
  transition-timing-function: ease-in-out;
}

.focus-visible {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

/* Gradient animation for title */
@keyframes gradient {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradient 3s ease infinite;
}

/* Animation delays utility classes */
.animation-delay-500 {
  animation-delay: 500ms;
}

.animation-delay-1000 {
  animation-delay: 1000ms;
}

/* Gradient shift animation */
@keyframes gradient-shift {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

.animate-gradient-shift {
  background-size: 200% 200%;
  animation: gradient-shift 4s ease infinite;
}

/* Reduce motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
</file>

<file path="src/pages/admin.tsx">
import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect } from "react";
import Layout from "@/components/layout/Layout";
import QuestionForm from "@/components/admin/QuestionForm";
import QuestionList from "@/components/admin/QuestionList";
import { Question } from "@/types/quiz";
import { blobStorage } from "@/lib/blob-storage";

type AdminView = "list" | "add" | "edit";

const AdminPage: NextPage = () => {
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentView, setCurrentView] = useState<AdminView>("list");
  const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);

  // Load questions from blob storage on mount
  useEffect(() => {
    const loadQuestions = async () => {
      try {
        console.log("🔄 Starting to load questions...");
        setIsLoading(true);
        const loadedQuestions = await blobStorage.getQuestions();
        console.log("✅ Questions loaded:", loadedQuestions);
        console.log("📊 Questions count:", loadedQuestions.length);
        setQuestions(loadedQuestions);
        console.log("🎯 Questions state set");
      } catch (error) {
        console.error("❌ Failed to load questions:", error);
        setSaveError(
          "Failed to load questions. Please try refreshing the page.",
        );
      } finally {
        console.log("🏁 Loading finished, setting isLoading to false");
        setIsLoading(false);
      }
    };

    loadQuestions();
  }, []);

  // Save questions to blob storage whenever they change
  const saveQuestions = async (updatedQuestions: Question[]) => {
    try {
      setIsSaving(true);
      setSaveError(null);
      setQuestions(updatedQuestions);
      await blobStorage.saveQuestions(updatedQuestions);
      console.log("✅ Questions saved successfully");
    } catch (error) {
      console.error("❌ Failed to save questions:", error);
      setSaveError("Failed to save questions. Please try again.");
      // Revert to previous state on error
      setQuestions(questions);
    } finally {
      setIsSaving(false);
    }
  };

  const handleAddQuestion = () => {
    setEditingQuestion(null);
    setCurrentView("add");
  };

  const handleEditQuestion = (question: Question) => {
    setEditingQuestion(question);
    setCurrentView("edit");
  };

  const handleSaveQuestion = async (question: Question) => {
    if (currentView === "edit" && editingQuestion) {
      // Update existing question
      await saveQuestions(
        questions.map((q) => (q.id === question.id ? question : q)),
      );
    } else {
      // Add new question
      await saveQuestions([...questions, question]);
    }
    setCurrentView("list");
    setEditingQuestion(null);
  };

  const handleDeleteQuestion = async (questionId: string) => {
    if (window.confirm("Are you sure you want to delete this question?")) {
      await saveQuestions(questions.filter((q) => q.id !== questionId));
    }
  };

  const handleCancel = () => {
    setCurrentView("list");
    setEditingQuestion(null);
  };

  const handleExportQuestions = () => {
    const dataStr = JSON.stringify(questions, null, 2);
    const dataUri =
      "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);

    const exportFileDefaultName = `quiz-questions-${new Date().toISOString().split("T")[0]}.json`;

    const linkElement = document.createElement("a");
    linkElement.setAttribute("href", dataUri);
    linkElement.setAttribute("download", exportFileDefaultName);
    linkElement.click();
  };

  const handleImportQuestions = async (
    event: React.ChangeEvent<HTMLInputElement>,
  ) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const importedQuestions = JSON.parse(e.target?.result as string);
          if (Array.isArray(importedQuestions)) {
            await saveQuestions(importedQuestions);
            alert("Questions imported successfully!");
          } else {
            alert("Invalid file format. Please upload a valid questions file.");
          }
        } catch (error) {
          alert("Error importing questions. Please check the file format.");
        }
      };
      reader.readAsText(file);
    }
    // Reset the input
    event.target.value = "";
  };

  const handleClearAll = async () => {
    if (
      window.confirm(
        "Are you sure you want to delete all questions? This action cannot be undone.",
      )
    ) {
      await saveQuestions([]);
    }
  };

  // New blob storage specific handlers
  const handleViewStorageInfo = async () => {
    try {
      // Call debug API to get storage info
      const response = await fetch("/api/debug-blob");
      const info = await response.json();

      if (!response.ok) {
        throw new Error(info.error || "Failed to get storage info");
      }

      const message = `
Storage Information:
• Environment: ${info.environment}
• Token Configured: ${info.hasToken ? "✅ Yes" : "❌ No"}
• Total Questions: ${info.tests.listTest?.details?.blobCount || 0} blobs found
• Storage Type: Vercel Blob Storage

Your quiz questions are stored securely in Vercel Blob storage and will persist across deployments.
Automatic backups are created when you save questions.
      `.trim();

      alert(message);
    } catch (error) {
      console.error("Failed to get storage info:", error);
      alert("❌ Failed to retrieve storage information.");
    }
  };

  return (
    <>
      <Head>
        <title>Quiz Admin - FMIB Quiz</title>
        <meta
          name="description"
          content="Admin interface for managing quiz questions"
        />
      </Head>

      <Layout title="Quiz Admin">
        <div className="container mx-auto px-4 py-8">
          {/* Header */}
          <div className="mb-8 flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                Quiz Admin Panel
              </h1>
              <p className="mt-2 text-gray-600 dark:text-gray-400">
                Manage your quiz questions and answers
              </p>
            </div>

            {currentView === "list" && (
              <div className="flex flex-wrap gap-3">
                <button
                  onClick={handleExportQuestions}
                  disabled={questions.length === 0 || isSaving}
                  className="rounded-md bg-green-600 px-4 py-2 font-medium text-white transition-colors hover:bg-green-700 disabled:cursor-not-allowed disabled:bg-gray-400"
                >
                  Export
                </button>

                <label className="cursor-pointer rounded-md bg-purple-600 px-4 py-2 font-medium text-white transition-colors hover:bg-purple-700 disabled:cursor-not-allowed disabled:bg-gray-400">
                  Import
                  <input
                    type="file"
                    accept=".json"
                    onChange={handleImportQuestions}
                    disabled={isSaving}
                    className="hidden"
                  />
                </label>

                <button
                  onClick={handleViewStorageInfo}
                  className="rounded-md bg-teal-600 px-4 py-2 font-medium text-white transition-colors hover:bg-teal-700"
                >
                  Storage Info
                </button>

                <button
                  onClick={handleClearAll}
                  disabled={questions.length === 0 || isSaving}
                  className="rounded-md bg-red-600 px-4 py-2 font-medium text-white transition-colors hover:bg-red-700 disabled:cursor-not-allowed disabled:bg-gray-400"
                >
                  Clear All
                </button>

                <button
                  onClick={handleAddQuestion}
                  className="rounded-md bg-blue-600 px-4 py-2 font-medium text-white transition-colors hover:bg-blue-700"
                >
                  Add Question
                </button>
              </div>
            )}
          </div>

          {/* Stats */}
          <div className="mb-8 grid grid-cols-1 gap-6 md:grid-cols-3">
            <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
              <div className="flex items-center">
                <div className="flex-1">
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    Total Questions
                  </p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {questions.length}
                  </p>
                </div>
              </div>
            </div>

            <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
              <div className="flex items-center">
                <div className="flex-1">
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    Total Answers
                  </p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {questions.reduce((sum, q) => sum + q.answers.length, 0)}
                  </p>
                </div>
              </div>
            </div>

            <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
              <div className="flex items-center">
                <div className="flex-1">
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    Ready for Quiz
                  </p>
                  <p className="text-2xl font-bold text-green-600 dark:text-green-400">
                    {questions.length > 0 ? "Yes" : "No"}
                  </p>
                </div>
              </div>
            </div>

            {/* Storage Status */}
            <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
              <div className="flex items-center">
                <div className="flex-1">
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    Storage Type
                  </p>
                  <p className="text-lg font-bold text-blue-600 dark:text-blue-400">
                    Vercel Blob ✨
                  </p>
                  <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                    Persistent across deployments
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Error Display */}
          {saveError && (
            <div className="mb-6 rounded-lg border border-red-200 bg-red-50 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg
                    className="h-5 w-5 text-red-400"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">Error</h3>
                  <p className="mt-1 text-sm text-red-700">{saveError}</p>
                </div>
                <div className="ml-auto pl-3">
                  <button
                    onClick={() => setSaveError(null)}
                    className="text-red-500 hover:text-red-700"
                  >
                    <svg
                      className="h-5 w-5"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fillRule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Main Content */}
          <div className="rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-700 dark:bg-gray-800">
            <div className="p-6">
              {isLoading ? (
                <div className="py-12 text-center">
                  <div className="inline-flex items-center space-x-2">
                    <div className="h-6 w-6 animate-spin rounded-full border-b-2 border-blue-600"></div>
                    <p className="text-gray-600 dark:text-gray-400">
                      Loading questions from Vercel Blob...
                    </p>
                  </div>
                </div>
              ) : currentView === "list" ? (
                <QuestionList
                  questions={questions}
                  onEdit={handleEditQuestion}
                  onDelete={handleDeleteQuestion}
                />
              ) : (
                <div>
                  <h2 className="mb-6 text-xl font-semibold text-gray-800 dark:text-white">
                    {currentView === "edit"
                      ? "Edit Question"
                      : "Add New Question"}
                  </h2>
                  <QuestionForm
                    question={editingQuestion || undefined}
                    onSave={handleSaveQuestion}
                    onCancel={handleCancel}
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};

export default AdminPage;
</file>

<file path="src/pages/certificate.tsx">
import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { QuizCertificate } from "@/components/quiz/QuizCertificate";
import { UserInfo } from "@/types/quiz";
import { type QuizServiceResponse } from "@/lib/quizService";

interface CertificateData {
  userInfo: UserInfo;
  quizResult: QuizServiceResponse['data'];
  completionTime: string;
}

const CertificatePage: React.FC = () => {
  const router = useRouter();
  const [certificateData, setCertificateData] = useState<CertificateData | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Retrieve certificate data from localStorage
    const storedData = localStorage.getItem('certificateData');

    if (storedData) {
      try {
        const data = JSON.parse(storedData);
        setCertificateData(data);
      } catch (error) {
        console.error('Error parsing certificate data:', error);
        // If data is invalid, redirect to quiz
        router.push('/quiz');
      }
    } else {
      // No certificate data found, redirect to quiz
      router.push('/quiz');
    }

    setIsLoading(false);
  }, [router]);

  const handleRestart = () => {
    router.push('/quiz');
  };

  const handleGoHome = () => {
    router.push('/');
  };

  if (isLoading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-blue-600 border-t-transparent"></div>
          <p className="mt-2 text-gray-600">Đang tải chứng nhận...</p>
        </div>
      </div>
    );
  }

  if (!certificateData) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Không tìm thấy chứng nhận</h1>
          <p className="mt-2 text-gray-600">Vui lòng hoàn thành bài trắc nghiệm trước.</p>
          <button
            onClick={() => router.push('/quiz')}
            className="mt-4 rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
          >
            Đi đến bài trắc nghiệm
          </button>
        </div>
      </div>
    );
  }

  const { userInfo, quizResult, completionTime } = certificateData;

  // Format time spent
  const timeSpentMinutes = Math.floor((quizResult?.summary?.timeSpent || 0) / 60);
  const timeSpentSeconds = (quizResult?.summary?.timeSpent || 0) % 60;
  const timeSpent = `${timeSpentMinutes} phút ${timeSpentSeconds} giây`;

  const certificateProps = {
    userName: userInfo.name,
    studentNumber: userInfo.studentNumber,
    classNumber: userInfo.classNumber,
    major: userInfo.major, // Use the major from user info stored in localStorage
    score: quizResult?.summary?.correctAnswers || 0,
    totalQuestions: quizResult?.summary?.totalQuestions || 0,
    percentage: quizResult?.summary?.percentage || 0,
    timeSpent: timeSpent,
    completedAt: completionTime,
    onRestart: handleRestart,
    onGoHome: handleGoHome,
  };

  return (
    <div>
      <QuizCertificate {...certificateProps} />
    </div>
  );
};

export default CertificatePage;
</file>

<file path="src/components/quiz/QuestionDisplay.tsx">
import { useState, useEffect, memo } from "react";
import { Question } from "@/types/quiz";
import { Card, CardContent, CardHeader } from "@/components/ui/Card";
import { Alert } from "@/components/ui/Alert";

interface QuestionDisplayProps {
  question: Question;
  questions: Question[];
  questionNumber: number;
  totalQuestions: number;
  selectedAnswer: string | null;
  onAnswerSelect: (answerId: string) => void;
  onNext: () => void;
  onPrevious: () => void;
  canGoNext: boolean;
  canGoPrevious: boolean;
  isLastQuestion: boolean;
  timeRemaining: number;
}

const QuestionDisplay = memo(function QuestionDisplay({
  question,
  questionNumber,
  selectedAnswer,
  onAnswerSelect,
  onNext,
  onPrevious,
  canGoPrevious,
  isLastQuestion,
}: QuestionDisplayProps) {
  const [error, setError] = useState<string | null>(null);

  // Clear error when answer is selected
  useEffect(() => {
    if (selectedAnswer) {
      setError(null);
    }
  }, [selectedAnswer]);

  const handleNext = () => {
    if (!selectedAnswer) {
      setError("Vui lòng chọn một câu trả lời trước khi tiếp tục");
      return;
    }
    onNext();
  };

  return (
    <div className="mx-auto w-full max-w-4xl space-y-4 sm:space-y-6">
      {/* Question Card */}
      <Card variant="elevated">
        <CardHeader>
          <div className="flex items-start space-x-3 sm:space-x-4">
            <div className="flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 sm:h-10 sm:w-10 dark:bg-blue-900">
              <span className="text-xs font-bold text-blue-800 sm:text-sm dark:text-blue-200">
                {questionNumber}
              </span>
            </div>
            <div className="min-w-0 flex-1">
              <h2 className="pr-2 text-lg leading-relaxed font-semibold text-gray-900 sm:text-xl lg:text-2xl dark:text-white">
                {question.question}
              </h2>
              <p className="mt-1 text-xs text-gray-500 sm:mt-2 sm:text-sm dark:text-gray-400">
                Chọn một câu trả lời bên dưới
              </p>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* Answer Options */}
          <div className="mb-8 space-y-4 sm:mb-10">
            {question.answers.map((answer, index) => {
              const isSelected = selectedAnswer === answer.id;
              const letter = String.fromCharCode(65 + index); // A, B, C, D

              return (
                <div
                  key={answer.id}
                  className={`group relative transform cursor-pointer transition-all duration-300 ${
                    isSelected ? "scale-[1.02]" : "hover:scale-[1.01]"
                  }`}
                >
                  <label className="block cursor-pointer">
                    <input
                      type="radio"
                      name={`question-${question.id}`}
                      value={answer.id}
                      checked={isSelected}
                      onChange={() => onAnswerSelect(answer.id)}
                      className="sr-only"
                      aria-describedby={`answer-${answer.id}`}
                      aria-pressed={isSelected}
                    />
                    <div
                      className={`relative rounded-2xl border-2 p-4 backdrop-blur-sm transition-all duration-300 sm:p-6 ${
                        isSelected
                          ? "border-blue-500 bg-gradient-to-r from-blue-50/90 to-indigo-50/90 shadow-lg dark:from-blue-900/30 dark:to-indigo-900/30"
                          : "border-gray-200/50 bg-white/60 hover:border-blue-300/50 hover:bg-gradient-to-r hover:from-blue-50/20 hover:to-indigo-50/20 hover:shadow-md dark:border-gray-700/50 dark:bg-gray-800/60 dark:hover:border-blue-700/50 dark:hover:from-blue-900/10 dark:hover:to-indigo-900/10"
                      }`}
                    >
                      <div className="flex items-center space-x-4 sm:space-x-6">
                        <div
                          className={`flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-2xl border-2 text-lg font-bold transition-all duration-300 ${
                            isSelected
                              ? "scale-110 transform border-blue-500 bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-lg"
                              : "border-gray-300 bg-white text-gray-500 group-hover:border-blue-400 group-hover:text-blue-600 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400 dark:group-hover:border-blue-600 dark:group-hover:text-blue-400"
                          }`}
                        >
                          {letter}
                        </div>
                        <div className="min-w-0 flex-1">
                          <p
                            id={`answer-${answer.id}`}
                            className={`text-base leading-relaxed break-words transition-colors duration-200 sm:text-lg ${
                              isSelected
                                ? "font-semibold text-gray-900 dark:text-white"
                                : "text-gray-700 group-hover:text-gray-900 dark:text-gray-300 dark:group-hover:text-white"
                            }`}
                          >
                            {answer.text}
                          </p>
                        </div>
                        {isSelected && (
                          <div className="flex-shrink-0">
                            <div className="relative">
                              <div className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-300 to-indigo-300 opacity-60 blur-md dark:from-blue-700 dark:to-indigo-700"></div>
                              <div className="relative flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 shadow-lg">
                                <svg
                                  className="h-5 w-5 text-white"
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={3}
                                    d="M5 13l4 4L19 7"
                                  />
                                </svg>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </label>
                </div>
              );
            })}
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-6">
              <Alert variant="error">{error}</Alert>
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="mt-8 flex items-center justify-between gap-3 sm:gap-6">
            <button
              onClick={onPrevious}
              disabled={!canGoPrevious}
              className={`group flex items-center space-x-3 rounded-xl px-6 py-3 font-semibold transition-all duration-200 ${
                canGoPrevious
                  ? "transform bg-gray-100 text-gray-700 hover:scale-105 hover:bg-gray-200 hover:shadow-md dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
                  : "cursor-not-allowed bg-gray-50 text-gray-400 dark:bg-gray-900 dark:text-gray-600"
              }`}
              aria-label="Go to previous question"
            >
              <svg
                className="h-5 w-5 transform transition-transform duration-200 group-hover:-translate-x-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2.5}
                  d="M15 19l-7-7 7-7"
                />
              </svg>
              <span>Câu trước</span>
            </button>

            <button
              onClick={handleNext}
              disabled={!selectedAnswer}
              className={`group flex items-center space-x-3 rounded-xl px-8 py-4 font-bold text-white transition-all duration-300 ${
                selectedAnswer
                  ? isLastQuestion
                    ? "transform bg-gradient-to-r from-green-500 to-emerald-600 hover:scale-[1.02] hover:from-green-600 hover:to-emerald-700 hover:shadow-lg"
                    : "transform bg-gradient-to-r from-blue-600 to-purple-600 hover:scale-[1.02] hover:from-blue-700 hover:to-purple-700 hover:shadow-lg"
                  : "cursor-not-allowed bg-gray-300 dark:bg-gray-700"
              }`}
              aria-label={
                isLastQuestion ? "Finish quiz" : "Go to next question"
              }
            >
              <span>{isLastQuestion ? "Hoàn thành" : "Tiếp theo"}</span>
              <svg
                className="h-5 w-5 transform transition-transform duration-200 group-hover:translate-x-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2.5}
                  d={isLastQuestion ? "M5 13l4 4L19 7" : "M9 5l7 7-7 7"}
                />
              </svg>
            </button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
});

export default QuestionDisplay;
</file>

<file path="package.json">
{
  "name": "fmib-quiz",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.2.3",
    "@vercel/blob": "^2.0.0",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "html2canvas": "^1.4.1",
    "lucide-react": "^0.546.0",
    "next": "15.5.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/canvas-confetti": "^1.9.0",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.5.6",
    "playwright": "^1.56.1",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.7.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="src/components/quiz/UserInfoForm.tsx">
import { useState } from "react";
import { UserInfo } from "@/types/quiz";
import { storage } from "@/lib/storage";

interface UserInfoFormProps {
  onSubmit: (userInfo: UserInfo) => void;
}

interface FormErrors {
  name?: string;
  studentNumber?: string;
  classNumber?: string;
  major?: string;
}

export default function UserInfoForm({ onSubmit }: UserInfoFormProps) {
  const [formData, setFormData] = useState<UserInfo>({
    name: "Chấp Hịp",
    studentNumber: "20240001",
    classNumber: "A1",
    major: "Công nghệ thông tin",
  });
  const [errors, setErrors] = useState<FormErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // Name validation
    if (!formData.name.trim()) {
      newErrors.name = "Họ và tên là bắt buộc";
    } else if (formData.name.trim().length < 2) {
      newErrors.name = "Họ và tên phải có ít nhất 2 ký tự";
    } else if (formData.name.trim().length > 100) {
      newErrors.name = "Họ và tên phải dưới 100 ký tự";
    }

    // Student number validation
    if (!formData.studentNumber.trim()) {
      newErrors.studentNumber = "Mã số sinh viên là bắt buộc";
    } else if (!/^[a-zA-Z0-9]{4,20}$/.test(formData.studentNumber.trim())) {
      newErrors.studentNumber =
        "Mã số sinh viên phải có 4-20 ký tự chữ và số";
    }

    // Class number validation
    if (!formData.classNumber.trim()) {
      newErrors.classNumber = "Lớp là bắt buộc";
    } else if (!/^[a-zA-Z0-9]{1,10}$/.test(formData.classNumber.trim())) {
      newErrors.classNumber =
        "Lớp phải có 1-10 ký tự chữ và số";
    }

    // Major validation
    if (!formData.major.trim()) {
      newErrors.major = "Ngành học là bắt buộc";
    } else if (formData.major.trim().length < 2) {
      newErrors.major = "Ngành học phải có ít nhất 2 ký tự";
    } else if (formData.major.trim().length > 100) {
      newErrors.major = "Ngành học phải dưới 100 ký tự";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange =
    (field: keyof UserInfo) => (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value;
      setFormData((prev) => ({ ...prev, [field]: value }));

      // Clear error for this field when user starts typing
      if (errors[field]) {
        setErrors((prev) => ({ ...prev, [field]: undefined }));
      }
    };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Store user information in localStorage
      const userInfo: UserInfo = {
        name: formData.name.trim(),
        studentNumber: formData.studentNumber.trim().toUpperCase(),
        classNumber: formData.classNumber.trim().toUpperCase(),
        major: formData.major.trim(),
      };

      // Create quiz session
      const session = {
        userInfo,
        answers: [],
        startTime: Date.now(),
        currentQuestionIndex: 0,
        isCompleted: false,
      };

      storage.saveQuizSession(session);

      // Call parent callback
      onSubmit(userInfo);
    } catch (error) {
      console.error("Error saving user information:", error);
      alert("Đã xảy ra lỗi. Vui lòng thử lại.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && e.currentTarget.tagName !== "BUTTON") {
      // Allow Enter to submit form from any input field
      const form = e.currentTarget.closest("form");
      if (form) {
        form.requestSubmit();
      }
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-3 sm:p-4 dark:from-gray-900 dark:via-slate-800 dark:to-indigo-900">
      <div className="absolute inset-0 bg-gradient-to-br from-blue-400/10 via-purple-400/10 to-pink-400/10 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20"></div>
      <div className="relative w-full max-w-lg">
        <div className="hover:shadow-3xl relative rounded-2xl border border-white/20 bg-white/90 p-4 shadow-2xl backdrop-blur-xl transition-all duration-500 sm:rounded-3xl sm:p-6 md:p-8 dark:border-gray-700/30 dark:bg-gray-900/90">
          {/* Compact Header for mobile */}
          <div className="mb-4 text-center sm:mb-6 md:mb-8">
            <div className="relative mb-3 inline-flex items-center justify-center sm:mb-4 md:mb-6">
              <div className="absolute -inset-1 animate-pulse rounded-full bg-gradient-to-r from-blue-500 to-purple-600 opacity-30 blur-lg sm:-inset-2"></div>
              <div className="relative flex h-12 w-12 transform items-center justify-center rounded-full bg-gradient-to-r from-blue-500 to-purple-600 shadow-lg transition-all duration-300 hover:scale-110 hover:rotate-6 sm:h-14 sm:w-14 md:h-16 md:w-16">
                <svg
                  className="h-5 w-5 text-white sm:h-6 sm:w-6 md:h-8 md:w-8"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                  />
                </svg>
              </div>
            </div>

            <h1 className="animate-gradient mb-2 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-2xl font-bold text-transparent sm:mb-3 sm:text-3xl md:text-4xl">
              Chuyện Nghề Gen Z
            </h1>

            <p className="mx-auto mb-3 max-w-xs text-xs leading-relaxed text-gray-600 sm:mb-4 sm:text-sm md:mb-6 dark:text-gray-300">
              Khám phá kiến thức về thế hệ Gen Z và chuẩn bị cho tương lai số
            </p>

            {/* Compact badges */}
            <div className="mb-4 flex justify-center gap-2 sm:mb-6 sm:gap-3 md:mb-8">
              <span className="inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs font-semibold text-blue-700 transition-transform hover:scale-105 sm:px-3 sm:py-1.5 dark:bg-blue-900/40 dark:text-blue-300">
                <svg
                  className="mr-1 h-2.5 w-2.5 sm:mr-1.5 sm:h-3 sm:w-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                10 phút
              </span>
              <span className="inline-flex items-center rounded-full bg-purple-100 px-2 py-1 text-xs font-semibold text-purple-700 transition-transform hover:scale-105 sm:px-3 sm:py-1.5 dark:bg-purple-900/40 dark:text-purple-300">
                <svg
                  className="mr-1 h-2.5 w-2.5 sm:mr-1.5 sm:h-3 sm:w-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                  />
                </svg>
                20 câu
              </span>
              <span className="inline-flex items-center rounded-full bg-pink-100 px-2 py-1 text-xs font-semibold text-pink-700 transition-transform hover:scale-105 sm:px-3 sm:py-1.5 dark:bg-pink-900/40 dark:text-pink-300">
                <svg
                  className="mr-1 h-2.5 w-2.5 sm:mr-1.5 sm:h-3 sm:w-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                Trắc nghiệm
              </span>
            </div>
          </div>

          <form
            onSubmit={handleSubmit}
            className="space-y-3 sm:space-y-4 md:space-y-5"
          >
            {/* Two column layout on larger screens */}
            <div className="grid grid-cols-1 gap-3 sm:gap-4 md:grid-cols-2">
              <div className="space-y-1.5 sm:space-y-2">
                <label
                  htmlFor="name"
                  className="block text-xs font-medium text-gray-700 sm:text-sm dark:text-gray-300"
                >
                  Họ và tên <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  autoComplete="name"
                  required
                  className={`w-full rounded-lg border bg-gray-50 px-3 py-2 text-sm transition-all duration-200 focus:border-transparent focus:ring-2 focus:ring-blue-500 sm:rounded-xl sm:px-4 sm:py-3 dark:bg-gray-800/50 dark:text-white ${
                    errors.name
                      ? "border-red-500 bg-red-50 dark:bg-red-900/20"
                      : "border-gray-200 hover:border-gray-300 dark:border-gray-600 dark:hover:border-gray-500"
                  }`}
                  value={formData.name}
                  onChange={handleInputChange("name")}
                  onKeyDown={handleKeyDown}
                  placeholder="Nhập họ tên"
                  disabled={isSubmitting}
                />
                {errors.name && (
                  <p className="flex items-center text-xs text-red-600 dark:text-red-400">
                    <svg
                      className="mr-1 h-3 w-3"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    {errors.name}
                  </p>
                )}
              </div>

              <div className="space-y-1.5 sm:space-y-2">
                <label
                  htmlFor="classNumber"
                  className="block text-xs font-medium text-gray-700 sm:text-sm dark:text-gray-300"
                >
                  Lớp <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="classNumber"
                  name="classNumber"
                  autoComplete="off"
                  required
                  className={`w-full rounded-lg border bg-gray-50 px-3 py-2 text-sm transition-all duration-200 focus:border-transparent focus:ring-2 focus:ring-blue-500 sm:rounded-xl sm:px-4 sm:py-3 dark:bg-gray-800/50 dark:text-white ${
                    errors.classNumber
                      ? "border-red-500 bg-red-50 dark:bg-red-900/20"
                      : "border-gray-200 hover:border-gray-300 dark:border-gray-600 dark:hover:border-gray-500"
                  }`}
                  value={formData.classNumber}
                  onChange={handleInputChange("classNumber")}
                  onKeyDown={handleKeyDown}
                  placeholder="e.g., A1"
                  disabled={isSubmitting}
                />
                {errors.classNumber && (
                  <p className="flex items-center text-xs text-red-600 dark:text-red-400">
                    <svg
                      className="mr-1 h-3 w-3"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    {errors.classNumber}
                  </p>
                )}
              </div>
            </div>

            <div className="space-y-1.5 sm:space-y-2">
              <label
                htmlFor="studentNumber"
                className="block text-xs font-medium text-gray-700 sm:text-sm dark:text-gray-300"
              >
                Mã số sinh viên <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="studentNumber"
                name="studentNumber"
                autoComplete="off"
                required
                className={`w-full rounded-lg border bg-gray-50 px-3 py-2 text-sm transition-all duration-200 focus:border-transparent focus:ring-2 focus:ring-blue-500 sm:rounded-xl sm:px-4 sm:py-3 dark:bg-gray-800/50 dark:text-white ${
                  errors.studentNumber
                    ? "border-red-500 bg-red-50 dark:bg-red-900/20"
                    : "border-gray-200 hover:border-gray-300 dark:border-gray-600 dark:hover:border-gray-500"
                }`}
                value={formData.studentNumber}
                onChange={handleInputChange("studentNumber")}
                onKeyDown={handleKeyDown}
                placeholder="e.g., 20240001"
                disabled={isSubmitting}
              />
              {errors.studentNumber && (
                <p className="flex items-center text-xs text-red-600 dark:text-red-400">
                  <svg
                    className="mr-1 h-3 w-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  {errors.studentNumber}
                </p>
              )}
            </div>

            <div className="space-y-1.5 sm:space-y-2">
              <label
                htmlFor="major"
                className="block text-xs font-medium text-gray-700 sm:text-sm dark:text-gray-300"
              >
                Ngành học <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="major"
                name="major"
                autoComplete="off"
                required
                className={`w-full rounded-lg border bg-gray-50 px-3 py-2 text-sm transition-all duration-200 focus:border-transparent focus:ring-2 focus:ring-blue-500 sm:rounded-xl sm:px-4 sm:py-3 dark:bg-gray-800/50 dark:text-white ${
                  errors.major
                    ? "border-red-500 bg-red-50 dark:bg-red-900/20"
                    : "border-gray-200 hover:border-gray-300 dark:border-gray-600 dark:hover:border-gray-500"
                }`}
                value={formData.major}
                onChange={handleInputChange("major")}
                onKeyDown={handleKeyDown}
                placeholder="e.g., Công nghệ thông tin"
                disabled={isSubmitting}
              />
              {errors.major && (
                <p className="flex items-center text-xs text-red-600 dark:text-red-400">
                  <svg
                    className="mr-1 h-3 w-3"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  {errors.major}
                </p>
              )}
            </div>

            <div className="pt-3 sm:pt-4">
              <button
                type="submit"
                disabled={isSubmitting}
                className="group relative w-full transform overflow-hidden rounded-xl bg-gradient-to-r from-blue-600 to-purple-600 px-4 py-3 text-sm font-semibold text-white shadow-lg transition-all duration-300 hover:scale-[1.02] hover:shadow-xl focus:ring-4 focus:ring-blue-500/50 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 disabled:hover:scale-100 sm:rounded-2xl sm:px-6 sm:py-4 sm:text-base"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-purple-600 to-pink-600 opacity-0 transition-opacity duration-300 group-hover:opacity-100"></div>
                <div className="relative flex items-center justify-center space-x-2">
                  {isSubmitting ? (
                    <>
                      <svg
                        className="h-4 w-4 animate-spin text-white sm:h-5 sm:w-5"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      <span className="text-sm sm:text-base">
                        Đang khởi động...
                      </span>
                    </>
                  ) : (
                    <>
                      <span className="text-sm sm:text-base">
                        Bắt đầu làm bài
                      </span>
                      <svg
                        className="h-4 w-4 transform transition-transform duration-200 group-hover:translate-x-1 sm:h-5 sm:w-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M13 7l5 5m0 0l-5 5m5-5H6"
                        />
                      </svg>
                    </>
                  )}
                </div>
              </button>

              <p className="mt-3 flex items-center justify-center text-center text-xs text-gray-500 sm:mt-4 dark:text-gray-400">
                <svg
                  className="mr-1 h-3 w-3 sm:mr-1.5 sm:h-3 sm:w-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span className="text-xs">
                  Thời gian sẽ bắt đầu khi bạn nhấn nút
                </span>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/quiz/QuizCertificate.tsx">
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/Button";
import { Download, Share2, Home, RotateCcw } from "lucide-react";
import html2canvas from "html2canvas";

interface QuizCertificateProps {
  userName: string;
  studentNumber: string;
  classNumber: string;
  major: string;
  score: number;
  totalQuestions: number;
  percentage: number;
  timeSpent: string;
  completedAt: string;
  onRestart: () => void;
  onGoHome: () => void;
}

export const QuizCertificate: React.FC<QuizCertificateProps> = ({
  userName,
  studentNumber,
  classNumber,
  major,
  score,
  totalQuestions,
  percentage,
  completedAt,
  onRestart,
  onGoHome,
}) => {
  const [certificateId, setCertificateId] = useState<string>("");
  const [isMounted, setIsMounted] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [scale, setScale] = useState(1);

  useEffect(() => {
    setIsMounted(true);
    setCertificateId(`FMIB-${Date.now().toString(36).toUpperCase()}`);

    // Calculate scale based on screen width
    const calculateScale = () => {
      const screenWidth = window.innerWidth;
      const certificateWidth = 800; // Base width
      const padding = 32; // 16px on each side

      // If screen is smaller than certificate width + padding, scale it down
      if (screenWidth < certificateWidth + padding) {
        const availableWidth = screenWidth - padding;
        const newScale = availableWidth / certificateWidth;
        // Minimum scale of 0.5 to maintain readability
        setScale(Math.max(newScale, 0.5));
      } else {
        setScale(1);
      }
    };

    calculateScale();
    window.addEventListener('resize', calculateScale);

    return () => {
      window.removeEventListener('resize', calculateScale);
    };
  }, []);

  const handleDownload = async () => {
    if (isDownloading) return;

    const element = document.getElementById("certificateContainer");
    if (!element) return;

    setIsDownloading(true);

    try {
      // Pre-load and convert logo image to data URL
      const logoImg = element.querySelector(
        'img[alt="FMIB Banner"]'
      ) as HTMLImageElement;
      let logoDataUrl = "";

      if (logoImg && logoImg.complete) {
        try {
          const canvas = document.createElement("canvas");
          canvas.width = logoImg.naturalWidth || 400;
          canvas.height = logoImg.naturalHeight || 120;
          const ctx = canvas.getContext("2d");
          if (ctx) {
            ctx.drawImage(logoImg, 0, 0);
            logoDataUrl = canvas.toDataURL("image/png");
          }
        } catch {
          console.log("Could not convert logo to data URL, will use fallback");
        }
      }

      // Wait a bit to ensure all styles are applied
      await new Promise((resolve) => setTimeout(resolve, 100));

      // Create a canvas from the certificate element with improved configuration
      const canvas = await html2canvas(element, {
        scale: 3, // Higher resolution for better quality
        useCORS: true, // Allow cross-origin images
        allowTaint: true, // Allow tainted canvas for external images
        backgroundColor: "#ffffff",
        logging: false,
        width: 800, // Use base width for consistent export
        height: element.offsetHeight / scale, // Adjust height based on current scale
        scrollX: 0,
        scrollY: -window.scrollY,
        windowWidth: element.scrollWidth,
        windowHeight: element.scrollHeight,
        foreignObjectRendering: false, // Disable for better compatibility
        imageTimeout: 0, // No timeout
        removeContainer: false,
        onclone: (clonedDoc) => {
          // Apply all styles explicitly to the cloned document
          const clonedElement = clonedDoc.getElementById(
            "certificateContainer"
          );
          if (clonedElement) {
            // Set explicit styles - remove scale for export
            clonedElement.style.width = "800px";
            clonedElement.style.minWidth = "800px";
            clonedElement.style.maxWidth = "800px";
            clonedElement.style.margin = "0";
            clonedElement.style.backgroundColor = "#ffffff";
            clonedElement.style.border = "12px solid #002b5c";
            clonedElement.style.fontFamily = "'Times New Roman', Times, serif";
            clonedElement.style.overflow = "visible";
            clonedElement.style.display = "block";
            clonedElement.style.boxShadow = "none";
            clonedElement.style.padding = "0";
            clonedElement.style.transform = "none"; // Remove scale for export
          }

          // Force Times New Roman font on all elements
          const allElements = clonedElement?.querySelectorAll("*");
          if (allElements) {
            allElements.forEach((el) => {
              const element = el as HTMLElement;
              element.style.fontFamily = "'Times New Roman', Times, serif";
            });
          }

          // Ensure all CSS variables are applied as actual values
          const style = clonedDoc.createElement("style");
          style.textContent = `
            * {
              font-family: 'Times New Roman', Times, serif !important;
              -webkit-print-color-adjust: exact !important;
              print-color-adjust: exact !important;
            }
            #certificateContainer {
              background-color: #ffffff !important;
              border: 12px solid #002b5c !important;
            }
            [style*="color: var(--dark-blue)"] {
              color: #002b5c !important;
            }
            [style*="color: var(--medium-blue)"] {
              color: #003366 !important;
            }
            .text-\\[\\#003366\\] {
              color: #003366 !important;
            }
            .text-\\[\\#dc3545\\] {
              color: #dc3545 !important;
            }
            .text-\\[\\#333333\\] {
              color: #333333 !important;
            }
            .bg-white {
              background-color: #ffffff !important;
            }
            .border-\\[\\#002b5c\\] {
              border-color: #002b5c !important;
            }
            .text-xl, .text-2xl, .text-4xl {
              font-family: 'Times New Roman', Times, serif !important;
              font-weight: bold !important;
            }
            img {
              display: block !important;
              margin: 0 auto !important;
            }
            .text-center {
              text-align: center !important;
            }
            .mx-auto {
              margin-left: auto !important;
              margin-right: auto !important;
            }
            .print\\:hidden {
              display: none !important;
            }
          `;
          clonedDoc.head.appendChild(style);

          // Handle images - use pre-loaded data URL or create fallback
          const images = clonedElement?.querySelectorAll("img");
          if (images) {
            images.forEach((img) => {
              const htmlImg = img as HTMLImageElement;

              // If we have the pre-loaded data URL, use it
              if (logoDataUrl) {
                htmlImg.src = logoDataUrl;
              } else {
                // Create a high-quality FMIB logo as fallback
                const logoCanvas = clonedDoc.createElement("canvas");
                const logoCtx = logoCanvas.getContext("2d");
                if (logoCtx) {
                  // Set canvas size for high DPI
                  logoCanvas.width = 600;
                  logoCanvas.height = 180;

                  // Clear canvas with white background
                  logoCtx.fillStyle = "#ffffff";
                  logoCtx.fillRect(0, 0, 600, 180);

                  // Draw FMIB text with professional styling
                  logoCtx.fillStyle = "#002b5c";
                  logoCtx.font = "bold 72px 'Times New Roman', Times, serif";
                  logoCtx.textAlign = "center";
                  logoCtx.textBaseline = "middle";
                  logoCtx.fillText("FMIB", 300, 70);

                  // Add club text
                  logoCtx.font = "28px 'Times New Roman', Times, serif";
                  logoCtx.fillStyle = "#003366";
                  logoCtx.fillText(
                    "Future Marketer International Businessman",
                    300,
                    130
                  );
                }
                htmlImg.src = logoCanvas.toDataURL("image/png");
              }

              htmlImg.style.display = "block";
              htmlImg.style.margin = "0 auto";
              htmlImg.style.maxWidth = "100%";
              htmlImg.style.height = "auto";
              htmlImg.crossOrigin = "anonymous";
            });
          }

          // Remove any print:hidden elements
          const hiddenElements =
            clonedElement?.querySelectorAll(".print\\:hidden");
          hiddenElements?.forEach((el) => el.remove());
        },
      });

      // Convert canvas to blob and download
      canvas.toBlob(
        (blob) => {
          if (blob) {
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = `FMIB-Quiz-Certificate-${userName.replace(
              /\s+/g,
              "-"
            )}-${Date.now()}.png`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
          }
          setIsDownloading(false);
        },
        "image/png",
        1.0
      );
    } catch (error) {
      console.error("Error generating certificate:", error);
      setIsDownloading(false);
      // Fallback to print if html2canvas fails
      window.print();
    }
  };

  const handleShare = () => {
    // TODO: Implement share functionality
    if (navigator.share) {
      navigator.share({
        title: "Chứng nhận FMIB",
        text: `Tôi đã hoàn thành bài trắc nghiệm FMIB với điểm số ${score}/${totalQuestions} (${percentage.toFixed(
          1
        )}%)!`,
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Action Buttons */}
        <div className="flex flex-row justify-end gap-2 mb-6 print:hidden">
          <Button
            onClick={handleDownload}
            variant="outline"
            size="sm"
            className="flex items-center gap-2 w-auto"
            disabled={isDownloading}
          >
            <Download className="w-4 h-4" />
            {isDownloading ? "Đang tạo..." : "Tải xuống"}
          </Button>
          <Button
            onClick={handleShare}
            variant="outline"
            size="sm"
            className="flex items-center gap-2 w-auto"
          >
            <Share2 className="w-4 h-4" />
            Chia sẻ
          </Button>
          <Button
            onClick={onRestart}
            variant="outline"
            size="sm"
            className="flex items-center gap-2 w-auto"
          >
            <RotateCcw className="w-4 h-4" />
            Làm lại
          </Button>
          <Button
            onClick={onGoHome}
            variant="outline"
            size="sm"
            className="flex items-center gap-2 w-auto"
          >
            <Home className="w-4 h-4" />
            Trang chủ
          </Button>
        </div>

        {/* Certificate Wrapper */}
        <div
          className="mx-auto mb-6"
          style={{
            width: `${800 * scale}px`,
            minHeight: `${600 * scale}px`,
          }}
        >
          {/* Certificate Container */}
          <div
            className="certificate-container bg-white border-[12px] border-[#002b5c] overflow-hidden transition-transform duration-300 ease-out"
            id="certificateContainer"
            style={{
              display: "block",
              width: "800px",
              fontFamily: "'Times New Roman', Times, serif",
              transform: `scale(${scale})`,
              transformOrigin: "top center",
            }}
          >
          {/* Certificate Header with Logos */}
          <div className="bg-white p-6 text-center">
            <div className="flex justify-center items-center gap-6 mb-4">
              {/* eslint-disable-next-line @next/next/no-img-element */}
              <img
                src="/fmib-banner.png"
                alt="FMIB Banner"
                className="h-16 w-auto"
                crossOrigin="anonymous"
                onLoad={(e) => {
                  // Preload the image to ensure it's available for export
                  const img = e.target as HTMLImageElement;
                  const canvas = document.createElement("canvas");
                  const ctx = canvas.getContext("2d");
                  if (ctx) {
                    canvas.width = img.naturalWidth;
                    canvas.height = img.naturalHeight;
                    ctx.drawImage(img, 0, 0);
                    // Store data URL for later use in export
                    img.setAttribute("data-fallback", canvas.toDataURL());
                  }
                }}
                onError={(e) => {
                  // Fallback: create a simple text logo if image fails to load
                  const target = e.target as HTMLImageElement;
                  target.style.display = "none";
                  const fallback = document.createElement("div");
                  fallback.className = "text-4xl font-bold text-blue-800";
                  fallback.textContent = "FMIB";
                  target.parentNode?.insertBefore(fallback, target.nextSibling);
                }}
              />
            </div>
          </div>

          {/* Certificate Title */}
          <div className="text-center py-4">
            <div
              className="text-[1.8rem]"
              style={{
                fontWeight: 700,
                color: "var(--dark-blue)",
                marginBottom: "0.5rem",
                textTransform: "uppercase",
              }}
            >
              CHỨNG NHẬN HOÀN THÀNH
            </div>
            <div
              className="text-[1.2rem]"
              style={{
                marginBottom: "1.5rem",
                color: "var(--medium-blue)",
              }}
            >
              Chứng nhận hoàn thành
            </div>
          </div>

          {/* Certificate Body */}
          <div className="px-8 py-6">
            <p className="text-center text-base text-[#333333] mb-6">
              Công nhận
            </p>
            <div
              className="text-4xl font-bold text-center text-[#003366] mb-4 relative inline-block w-full"
              id="certName"
            >
              {userName}
            </div>
            <div className="flex flex-wrap justify-center gap-8 mb-8 max-w-2xl mx-auto">
              <div className="text-center text-xl flex-shrink-0 font-bold">
                <span className="text-xl text-[#333333]">Lớp:</span>
                <span className="ml-1 text-[#333333]" id="certClass">
                  {classNumber}
                </span>
              </div>
              <div className="text-center text-xl flex-shrink-0 font-bold">
                <span className="text-xl text-[#333333]">MSSV:</span>
                <span className="ml-1 text-[#333333]" id="certId">
                  {studentNumber}
                </span>
              </div>
              <div className="text-center text-xl flex-shrink-0 min-w-0 font-bold">
                <span className="text-xl text-[#333333]">Ngành:</span>
                <span
                  className="ml-1 text-[#333333] break-words"
                  id="certMajor"
                >
                  {major}
                </span>
              </div>
            </div>
            <p className="text-center text-[#333333] leading-relaxed text-base mb-8 max-w-lg mx-auto font-semibold">
              Đã hoàn thành bài trắc nghiệm thu hoạch từ chương trình Chuyện
              nghề Gen Z: Tư duy nghề thời kỳ kinh tế số
            </p>
          </div>

          {/* Certificate Footer */}
          <div className="px-8 py-6 bg-white mb-16">
            <div className="flex flex-row justify-between gap-6">
              <div className="flex-1 text-center">
                <div className="text-xl text-[#333333] mb-1 font-semibold">
                  Lãnh đạo Khoa Marketing
                  <br />
                  Kinh doanh quốc tế
                </div>
                <div className="text-sm text-[#dc3545] mb-2 italic">
                  (Đã ký)
                </div>
                <div
                  className="font-normal text-2xl"
                  style={{
                    fontFamily: "'Brush Script MT', cursive",
                    marginTop: "0.5rem",
                    color: "var(--dark-blue)",
                  }}
                >
                  TS. Châu Văn Thưởng
                </div>
              </div>

              <div className="text-center flex-1">
                <div className="text-xl text-[#333333] mb-1 font-bold">
                  Chủ nhiệm CLB Future Marketer International Businessman
                </div>
                <div className="text-sm text-[#dc3545] mb-2 italic">
                  (Đã ký)
                </div>
                <div
                  className="font-normal text-2xl"
                  style={{
                    fontFamily: "'Brush Script MT', cursive",
                    marginTop: "0.5rem",
                    color: "var(--dark-blue)",
                  }}
                >
                  Hoàng Bảo Trâm
                </div>
              </div>
            </div>
          </div>
          </div>
        </div>

        {/* Download Button */}
        <div className="text-center py-6 print:hidden">
          <button
            className="bg-[#ffc107] hover:bg-[#e0a800] disabled:bg-gray-400 text-black font-bold py-3 px-8 rounded-full transition-colors text-base disabled:cursor-not-allowed"
            onClick={handleDownload}
            disabled={isDownloading}
          >
            {isDownloading ? "Đang tạo..." : "Tải chứng nhận"}
          </button>
        </div>

        {/* Certificate ID and Date */}
        {isMounted && (
          <div className="mt-4 text-center text-sm text-gray-500 print:hidden">
            <p>Mã chứng nhận: {certificateId}</p>
            <p>
              Ngày cấp:{" "}
              {new Date(completedAt).toLocaleDateString("vi-VN", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </p>
          </div>
        )}

        {/* Export and Print Styles */}
        <style jsx global>{`
          /* CSS Variables for certificate colors */
          :root {
            --dark-blue: #002b5c;
            --medium-blue: #003366;
          }

          /* Certificate export optimization */
          .certificate-container {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
              0 2px 4px -1px rgba(0, 0, 0, 0.06);
            font-family: "Times New Roman", Times, serif;
          }

          /* Ensure text rendering is consistent */
          .certificate-container * {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            text-rendering: optimizeLegibility;
          }

          /* Print Styles */
          @media print {
            .print\\:hidden {
              display: none !important;
            }

            body {
              background: white !important;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
              margin: 0 !important;
              padding: 0 !important;
            }

            .min-h-screen {
              min-height: auto !important;
              padding: 0 !important;
              background: white !important;
            }

            .certificate-container {
              box-shadow: none !important;
              margin: 0 auto !important;
              border-color: #002b5c !important;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
              page-break-inside: avoid;
            }

            .certificate-footer {
              background-color: white !important;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
            }

            .border-\\[\\#002b5c\\] {
              border-color: #002b5c !important;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
            }

            .text-\\[\\#003366\\] {
              color: #003366 !important;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
            }

            .text-\\[\\#dc3545\\] {
              color: #dc3545 !important;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
            }
          }

          /* Canvas capture optimization for html2canvas */
          .html2canvas-container {
            position: relative !important;
            width: auto !important;
            height: auto !important;
            overflow: visible !important;
          }
        `}</style>
      </div>
    </div>
  );
};
</file>

<file path="src/pages/quiz.tsx">
import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import confetti from "canvas-confetti";
import Layout from "@/components/layout/Layout";
import UserInfoForm from "@/components/quiz/UserInfoForm";
import QuestionDisplay from "@/components/quiz/QuestionDisplay";
import QuizTimer from "@/components/quiz/QuizTimer";
import { Button } from "@/components/ui/Button";
import { Card, CardContent } from "@/components/ui/Card";
import { Alert } from "@/components/ui/Alert";
import {
  AnimatedLoading,
  PageTransition,
  FadeIn,
  SlideIn,
  ScaleIn,
} from "@/components/ui/AnimatedLoading";
import { UserInfo, Question, QuizAnswer } from "@/types/quiz";
import { storage, isSessionExpired } from "@/lib/storage";
import { quizService, type QuizServiceResponse } from "@/lib/quizService";

type QuizStep = "info" | "quiz" | "results";

// Helper functions for performance feedback (temporary until QuizResults component is integrated)
const getPerformanceMessage = (percentage: number): string => {
  if (percentage >= 90) return "Hiệu suất xuất sắc! 🎉";
  if (percentage >= 80) return "Làm việc tuyệt vời! 🌟";
  if (percentage >= 70) return "Làm tốt! 👍";
  if (percentage >= 60) return "Nỗ lực tốt! 💪";
  if (percentage >= 50) return "Tiếp tục rèn luyện! 📚";
  return "Cần cải thiện! 🎯";
};

const getPerformanceAdvice = (percentage: number): string => {
  if (percentage >= 80) return "Bạn đã thành thạo tài liệu này!";
  if (percentage >= 70) return "Bạn có hiểu biết tốt về tài liệu.";
  if (percentage >= 60) return "Xem lại các phần bạn gặp khó khăn.";
  if (percentage >= 50) return "Cân nhắc dành nhiều thời gian học hơn.";
  return "Đừng bỏ cuộc! Luyện tập tạo nên sự hoàn hảo.";
};

const QuizPage: NextPage = () => {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState<QuizStep>("info");
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [timeRemaining, setTimeRemaining] = useState(600); // 10 minutes in seconds
  const [isTimerExpired, setIsTimerExpired] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [quizResult, setQuizResult] = useState<
    QuizServiceResponse["data"] | null
  >(null);
  const [error, setError] = useState<string | null>(null);
  const [sessionStartTime, setSessionStartTime] = useState<number | null>(null);
  const [selectedAnswers, setSelectedAnswers] = useState<Map<string, string>>(
    new Map(),
  );

  // Trigger confetti effect when score >= 60% and results are shown
  useEffect(() => {
    if (
      currentStep === "results" &&
      quizResult &&
      (quizResult.summary?.percentage || 0) >= 60
    ) {
      // Trigger confetti explosion for 10 seconds
      const defaults = { startVelocity: 15, spread: 360, ticks: 80, zIndex: 0 };

      function randomInRange(min: number, max: number) {
        return Math.random() * (max - min) + min;
      }

      const interval: NodeJS.Timeout = setInterval(function () {
        const particleCount = 25;

        // Launch confetti from random positions
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
        });
        confetti({
          ...defaults,
          particleCount,
          origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
        });
      }, 600);

      // Stop confetti after 5 seconds
      const timeout: NodeJS.Timeout = setTimeout(() => {
        clearInterval(interval);
      }, 5000);

      // Cleanup both interval and timeout
      return () => {
        clearInterval(interval);
        clearTimeout(timeout);
      };
    }
  }, [currentStep, quizResult]);

  // Check for existing session on mount
  useEffect(() => {
    const existingSession = storage.getQuizSession();
    const savedQuestions = storage.getQuestions();

    if (savedQuestions.length === 0) {
      setError(
        "Không có câu hỏi trắc nghiệm nào. Vui lòng liên hệ quản trị viên.",
      );
      setIsLoading(false);
      return;
    }

    setQuestions(savedQuestions);

    // Load existing answers into state for faster access
    const userAnswers = storage.getUserAnswers();
    const answersMap = new Map<string, string>();
    userAnswers.forEach((answer) => {
      answersMap.set(answer.questionId, answer.answerId);
    });
    setSelectedAnswers(answersMap);

    if (
      existingSession &&
      !existingSession.isCompleted &&
      !isSessionExpired(existingSession.startTime)
    ) {
      // Resume existing session
      setUserInfo(existingSession.userInfo);
      setCurrentQuestionIndex(existingSession.currentQuestionIndex);
      setSessionStartTime(existingSession.startTime);
      setCurrentStep("quiz");
    } else if (existingSession && existingSession.isCompleted) {
      // Show completed results
      setUserInfo(existingSession.userInfo);
      setCurrentStep("results");
    } else if (existingSession && isSessionExpired(existingSession.startTime)) {
      // Clear expired session
      storage.clearQuizSession();
    }

    setIsLoading(false);
  }, []);

  // Get current selected answer from local state (much faster than localStorage)
  const getCurrentSelectedAnswer = useCallback((): string | null => {
    if (questions.length === 0 || currentQuestionIndex >= questions.length)
      return null;
    const currentQuestion = questions[currentQuestionIndex];
    return selectedAnswers.get(currentQuestion.id) || null;
  }, [questions, currentQuestionIndex, selectedAnswers]);

  // Handle quiz completion
  const handleFinishQuiz = useCallback(async () => {
    const session = storage.getQuizSession();
    if (!session || !userInfo) {
      setCurrentStep("results");
      return;
    }

    setIsSubmitting(true);
    setSubmitError(null);

    try {
      const userAnswers = storage.getUserAnswers();
      const submissionData = {
        userInfo,
        answers: userAnswers,
        questions: questions, // Include questions for grading
        startTime: session.startTime,
        endTime: Date.now(),
        timeExpired: isTimerExpired,
      };

      // Validate submission data
      const validation = quizService.validateSubmission(submissionData);
      if (!validation.isValid) {
        throw new Error(validation.errors.join(", "));
      }

      // Submit to API (or fallback to simulation)
      const response = await quizService.submitQuiz(submissionData);

      if (response.success) {
        setQuizResult(response.data);
        const completedSession = { ...session, isCompleted: true };
        storage.saveQuizSession(completedSession);
        setCurrentStep("results");
      } else {
        throw new Error(response.error || "Failed to submit quiz");
      }
    } catch (error) {
      console.error("Quiz submission error:", error);
      setSubmitError(
        error instanceof Error ? error.message : "Failed to submit quiz",
      );

      // Still complete the quiz even if API fails
      const completedSession = { ...session, isCompleted: true };
      storage.saveQuizSession(completedSession);
      setCurrentStep("results");
    } finally {
      setIsSubmitting(false);
    }
  }, [userInfo, isTimerExpired, questions]);

  // Optimized answer selection with immediate local state update
  const handleAnswerSelect = useCallback(
    (answerId: string) => {
      if (questions.length === 0 || currentQuestionIndex >= questions.length)
        return;

      const currentQuestion = questions[currentQuestionIndex];

      // Update local state immediately for instant UI feedback
      setSelectedAnswers((prev) =>
        new Map(prev).set(currentQuestion.id, answerId),
      );

      // Prepare answer for localStorage
      const answer: QuizAnswer = {
        questionId: currentQuestion.id,
        answerId,
      };

      // Save to localStorage asynchronously (non-blocking)
      setTimeout(() => {
        storage.saveUserAnswer(answer);
      }, 0);
    },
    [questions, currentQuestionIndex],
  );

  // Handle next question
  const handleNext = useCallback(() => {
    if (currentQuestionIndex < questions.length - 1) {
      const nextIndex = currentQuestionIndex + 1;
      setCurrentQuestionIndex(nextIndex);

      // Update session
      const session = storage.getQuizSession();
      if (session) {
        const updatedSession = { ...session, currentQuestionIndex: nextIndex };
        storage.saveQuizSession(updatedSession);
      }
    } else {
      // Last question, finish quiz
      handleFinishQuiz();
    }
  }, [currentQuestionIndex, questions.length, handleFinishQuiz]);

  // Handle previous question
  const handlePrevious = useCallback(() => {
    if (currentQuestionIndex > 0) {
      const prevIndex = currentQuestionIndex - 1;
      setCurrentQuestionIndex(prevIndex);

      // Update session
      const session = storage.getQuizSession();
      if (session) {
        const updatedSession = { ...session, currentQuestionIndex: prevIndex };
        storage.saveQuizSession(updatedSession);
      }
    }
  }, [currentQuestionIndex]);

  // Handle timer expiration
  const handleTimeExpire = useCallback(() => {
    setIsTimerExpired(true);
    handleFinishQuiz();
  }, [handleFinishQuiz]);

  // Handle timer tick
  const handleTimerTick = useCallback((remainingTime: number) => {
    setTimeRemaining(remainingTime);
  }, []);

  const handleUserInfoSubmit = (submittedUserInfo: UserInfo) => {
    const startTime = Date.now();
    setSessionStartTime(startTime);
    setUserInfo(submittedUserInfo);
    setCurrentQuestionIndex(0);
    setCurrentStep("quiz");
    setTimeRemaining(600); // Reset timer to 10 minutes
  };

  const handleRestartQuiz = useCallback(() => {
    // Clear all quiz-related data from localStorage
    storage.clearQuizSession();
    storage.clearUserAnswers();

    // Reset all state variables
    setUserInfo(null);
    setCurrentQuestionIndex(0);
    setTimeRemaining(600); // Reset timer to 10 minutes
    setIsTimerExpired(false);
    setIsSubmitting(false);
    setSubmitError(null);
    setQuizResult(null);
    setSessionStartTime(null);
    setError(null);
    setSelectedAnswers(new Map()); // Clear local answers state

    // Reset to info step
    setCurrentStep("info");

    // Optional: Clear any cached quiz data if needed
    // storage.clearQuestions() // Uncomment if you want to reset questions too
  }, []);

  const handleGoHome = () => {
    router.push("/");
  };

  const handleViewCertificate = () => {
    if (userInfo && quizResult) {
      // Store certificate data in localStorage for the certificate page to retrieve
      const certificateData = {
        userInfo,
        quizResult,
        completionTime: new Date().toISOString(),
      };
      localStorage.setItem("certificateData", JSON.stringify(certificateData));
      router.push("/certificate");
    }
  };

  if (isLoading) {
    return (
      <>
        <Head>
          <title>FMIB Quiz - Đang tải</title>
        </Head>
        <Layout title="FMIB Quiz">
          <div className="flex min-h-[60vh] flex-1 items-center justify-center">
            <PageTransition>
              <Card
                variant="ghost"
                className="mx-auto max-w-md border-0 bg-transparent shadow-none"
              >
                <CardContent className="p-8 text-center">
                  <div className="mb-6">
                    <div className="relative mx-auto h-16 w-16">
                      <div className="absolute inset-0 animate-ping rounded-full bg-blue-400/20"></div>
                      <div className="relative flex h-16 w-16 items-center justify-center">
                        <div className="h-8 w-8 animate-spin rounded-full border-2 border-blue-500 border-t-transparent"></div>
                      </div>
                    </div>
                  </div>
                  <AnimatedLoading
                    type="dots"
                    size="lg"
                    text="Đang tải bài trắc nghiệm..."
                    className="mb-4 text-blue-600 dark:text-blue-400"
                  />
                  <FadeIn delay={300}>
                    <div className="space-y-2">
                      <p className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Đang chuẩn bị trải nghiệm trắc nghiệm cá nhân hóa của
                        bạn...
                      </p>
                      <div className="flex justify-center space-x-1">
                        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-500 [animation-delay:-0.3s]"></div>
                        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-500 [animation-delay:-0.15s]"></div>
                        <div className="h-2 w-2 animate-bounce rounded-full bg-blue-500"></div>
                      </div>
                    </div>
                  </FadeIn>
                </CardContent>
              </Card>
            </PageTransition>
          </div>
        </Layout>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Head>
          <title>FMIB Quiz - Lỗi</title>
        </Head>
        <Layout title="FMIB Quiz">
          <div className="flex min-h-[60vh] flex-1 items-center justify-center">
            <PageTransition>
              <div className="mx-auto w-full max-w-md px-4">
                <SlideIn direction="up" delay={100}>
                  <div className="mb-6 text-center">
                    <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/20">
                      <svg
                        className="h-8 w-8 text-red-600 dark:text-red-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
                        />
                      </svg>
                    </div>
                    <Alert
                      variant="error"
                      title="Bài trắc nghiệm không khả dụng"
                      className="mb-6"
                    >
                      {error}
                    </Alert>
                  </div>
                </SlideIn>
                <SlideIn direction="up" delay={200}>
                  <div className="flex justify-center">
                    <Button
                      onClick={handleGoHome}
                      variant="primary"
                      size="lg"
                      className="transform transition-all duration-200 hover:scale-105 active:scale-95"
                    >
                      <span className="flex items-center space-x-2">
                        <svg
                          className="h-4 w-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                          />
                        </svg>
                        <span>Về trang chủ</span>
                      </span>
                    </Button>
                  </div>
                </SlideIn>
              </div>
            </PageTransition>
          </div>
        </Layout>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>
          {currentStep === "info"
            ? "FMIB Quiz - Bắt đầu"
            : currentStep === "quiz"
              ? "FMIB Quiz - Đang làm"
              : "FMIB Quiz - Kết quả"}
        </title>
        <meta name="description" content="Làm bài trắc nghiệm FMIB" />
      </Head>

      <Layout title="FMIB Quiz">
        <PageTransition>
          <div className="flex-1 py-1 sm:py-0 lg:py-4">
            <div className="container mx-auto max-w-4xl px-2 sm:px-3 lg:px-6">
              {/* Header */}
              <header
                className="mb-2 text-center sm:mb-3 lg:mb-6"
                role="banner"
              >
                <div className="relative">
                  <div className="absolute inset-0 flex items-center justify-center opacity-10">
                    <div className="h-24 w-24 animate-pulse rounded-full border-4 border-blue-500"></div>
                  </div>
                </div>
              </header>

              {/* Step content */}
              <FadeIn delay={200}>
                {currentStep === "info" && (
                  <UserInfoForm onSubmit={handleUserInfoSubmit} />
                )}
              </FadeIn>

              <FadeIn delay={200}>
                {currentStep === "quiz" && (
                  <div>
                    <main
                      className="mx-auto max-w-full px-1 sm:max-w-3xl lg:max-w-4xl"
                      role="main"
                    >
                      {/* Quiz Progress Indicator */}
                      <div className="mb-4 rounded-lg bg-blue-50 p-3 dark:bg-blue-900/20">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <div className="h-2 w-2 animate-pulse rounded-full bg-blue-500"></div>
                            <span className="text-sm font-medium text-blue-900 dark:text-blue-100">
                              Câu hỏi {currentQuestionIndex + 1} /{" "}
                              {questions.length}
                            </span>
                          </div>
                          <div
                            className={`flex items-center space-x-2 rounded-full px-3 py-1.5 font-mono text-sm font-semibold transition-all duration-300 ${
                              timeRemaining <= 60
                                ? "animate-pulse bg-red-100 text-red-700 ring-2 ring-red-200 dark:bg-red-900/30 dark:text-red-300 dark:ring-red-800"
                                : timeRemaining <= 180
                                  ? "bg-yellow-100 text-yellow-700 ring-2 ring-yellow-200 dark:bg-yellow-900/30 dark:text-yellow-300 dark:ring-yellow-800"
                                  : "bg-green-100 text-green-700 ring-2 ring-green-200 dark:bg-green-900/30 dark:text-green-300 dark:ring-green-800"
                            }`}
                          >
                            <div
                              className={`flex items-center justify-center ${
                                timeRemaining <= 60 ? "animate-bounce" : ""
                              }`}
                            >
                              <svg
                                className={`h-4 w-4 ${
                                  timeRemaining <= 60 ? "animate-spin" : ""
                                }`}
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                                />
                              </svg>
                            </div>
                            <span className="tracking-wider tabular-nums">
                              {Math.floor(timeRemaining / 60)}:
                              {String(timeRemaining % 60).padStart(2, "0")}
                            </span>
                            {timeRemaining <= 60 && (
                              <span className="ml-1 animate-pulse text-xs font-bold">
                                !
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="mt-2 overflow-hidden rounded-full bg-blue-100 dark:bg-blue-900/30">
                          <div
                            className="h-1 bg-blue-500 transition-all duration-300 ease-out"
                            style={{
                              width: `${((currentQuestionIndex + 1) / questions.length) * 100}%`,
                            }}
                          ></div>
                        </div>
                      </div>

                      {/* Simple Timer (hidden but functional to keep timeRemaining updated) */}
                      {sessionStartTime && (
                        <div className="hidden">
                          <QuizTimer
                            startTime={sessionStartTime}
                            onTimeExpire={handleTimeExpire}
                            onTick={handleTimerTick}
                          />
                        </div>
                      )}
                      {/* Question Display */}
                      {questions.length > 0 &&
                        currentQuestionIndex < questions.length && (
                          <SlideIn direction="up" delay={200}>
                            <QuestionDisplay
                              question={questions[currentQuestionIndex]}
                              questions={questions}
                              questionNumber={currentQuestionIndex + 1}
                              totalQuestions={questions.length}
                              selectedAnswer={getCurrentSelectedAnswer()}
                              onAnswerSelect={handleAnswerSelect}
                              onNext={handleNext}
                              onPrevious={handlePrevious}
                              canGoNext={true}
                              canGoPrevious={currentQuestionIndex > 0}
                              isLastQuestion={
                                currentQuestionIndex === questions.length - 1
                              }
                              timeRemaining={timeRemaining}
                            />
                          </SlideIn>
                        )}
                      {/* Submitting Overlay */}
                      {isSubmitting && (
                        <div
                          className="bg-opacity-50 animate-fade-in fixed inset-0 z-50 flex items-center justify-center bg-black p-4 backdrop-blur-sm"
                          role="dialog"
                          aria-modal="true"
                          aria-labelledby="submitting-title"
                          aria-describedby="submitting-description"
                        >
                          <ScaleIn>
                            <Card
                              variant="elevated"
                              className="mx-4 w-full max-w-sm shadow-2xl"
                            >
                              <CardContent className="p-6 text-center">
                                <h2
                                  id="submitting-title"
                                  className="mb-2 text-lg font-semibold text-gray-900 dark:text-white"
                                >
                                  {isTimerExpired
                                    ? "Hết giờ! Đang nộp bài..."
                                    : "Đang nộp bài..."}
                                </h2>
                                <AnimatedLoading
                                  type="spinner"
                                  size="lg"
                                  className="my-4"
                                />
                                <p
                                  id="submitting-description"
                                  className="text-sm text-gray-600 dark:text-gray-400"
                                >
                                  Vui lòng không đóng cửa sổ này
                                </p>
                              </CardContent>
                            </Card>
                          </ScaleIn>
                        </div>
                      )}
                      {/* Submit Error Alert */}
                      {submitError && (
                        <div className="mx-auto mt-3 max-w-md">
                          <SlideIn direction="up">
                            <Alert variant="error" title="Lỗi nộp bài">
                              <div className="space-y-1">
                                <p className="text-sm">{submitError}</p>
                                <p className="text-xs opacity-80">
                                  Bài trắc nghiệm của bạn đã được lưu cục bộ.
                                  Bạn có thể thử lại hoặc liên hệ hỗ trợ.
                                </p>
                              </div>
                            </Alert>
                          </SlideIn>
                        </div>
                      )}
                      {/* End Quiz Button */}
                      {!isSubmitting && (
                        <div className="mt-3 text-center">
                          <Button
                            onClick={handleRestartQuiz}
                            variant="ghost"
                            size="sm"
                            className="transform text-red-600 transition-all duration-200 hover:scale-105 hover:bg-red-50 hover:text-red-800 active:scale-95 dark:text-red-400 dark:hover:bg-red-900/10 dark:hover:text-red-300"
                          >
                            <span className="flex items-center space-x-2">
                              <svg
                                className="h-4 w-4"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"
                                />
                              </svg>
                              <span>Kết thúc bài trắc nghiệm sớm</span>
                            </span>
                          </Button>
                        </div>
                      )}
                    </main>
                  </div>
                )}
              </FadeIn>

              <FadeIn delay={300}>
                {currentStep === "results" && (
                  <div className="mx-auto max-w-2xl">
                    <SlideIn direction="up" delay={100}>
                      <Card variant="elevated" className="overflow-hidden">
                        <div className="relative h-1 overflow-hidden bg-blue-500">
                          <div className="absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/30 to-transparent"></div>
                        </div>
                        <CardContent className="p-2 sm:p-3 lg:p-6">
                          <div className="py-4 text-center sm:py-6 lg:py-12">
                            {/* Timer Expired Warning */}
                            {isTimerExpired && (
                              <div className="mb-2 rounded-lg border border-yellow-200 bg-yellow-50 p-1.5 sm:mb-4 sm:p-3 dark:border-yellow-800 dark:bg-yellow-900/20">
                                <div className="flex items-center justify-center space-x-1.5">
                                  <svg
                                    className="h-4 w-4 flex-shrink-0 text-yellow-600 dark:text-yellow-400"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"
                                    />
                                  </svg>
                                  <p className="text-xs font-medium text-yellow-800 dark:text-yellow-200">
                                    Bài trắc nghiệm được tự động nộp do hết giờ
                                  </p>
                                </div>
                              </div>
                            )}

                            <svg
                              className={`h-10 w-10 sm:h-14 sm:w-14 lg:h-16 lg:w-16 ${
                                isTimerExpired
                                  ? "text-yellow-600 dark:text-yellow-400"
                                  : "text-green-600 dark:text-green-400"
                              } mx-auto mb-2 sm:mb-4`}
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              {isTimerExpired ? (
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                />
                              ) : (
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                                />
                              )}
                            </svg>
                            <h2 className="mb-1 text-lg font-bold text-gray-900 sm:mb-2 sm:text-xl lg:text-2xl dark:text-white">
                              {submitError
                                ? "Đã hoàn thành bài trắc nghiệm (có lỗi)"
                                : isTimerExpired
                                  ? "Hết giờ!"
                                  : "Đã hoàn thành bài trắc nghiệm!"}
                            </h2>
                            <p className="mb-3 text-xs text-gray-600 sm:mb-6 sm:text-sm dark:text-gray-400">
                              {submitError
                                ? "Bài trắc nghiệm của bạn đã hoàn thành nhưng có lỗi khi nộp lên máy chủ."
                                : isTimerExpired
                                  ? "Bài trắc nghiệm của bạn đã được tự động nộp khi hết giờ."
                                  : "Bài trắc nghiệm của bạn đã được nộp thành công!"}
                            </p>

                            {/* Quiz Results */}
                            {quizResult && (
                              <div className="mb-3 overflow-hidden rounded-2xl bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-2 shadow-xl backdrop-blur-sm transition-all duration-500 hover:shadow-2xl sm:mb-6 sm:p-4 lg:p-6 dark:border dark:border-gray-700/50 dark:from-gray-900/50 dark:via-blue-900/30 dark:to-purple-900/30">
                                <div className="relative">
                                  {/* Animated background elements */}
                                  <div className="absolute -top-4 -left-4 h-8 w-8 animate-pulse rounded-full bg-blue-400/20 blur-xl"></div>
                                  <div className="animation-delay-1000 absolute -right-4 -bottom-4 h-8 w-8 animate-pulse rounded-full bg-purple-400/20 blur-xl"></div>
                                  <div className="animation-delay-500 absolute top-1/2 -left-2 h-4 w-4 animate-ping rounded-full bg-indigo-400/30"></div>

                                  <h3 className="relative mb-3 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-center text-sm font-bold text-transparent sm:mb-4 sm:text-base lg:text-lg">
                                    ✨ Kết quả bài trắc nghiệm ✨
                                  </h3>

                                  {/* Score Display */}
                                  <div className="mb-4 text-center sm:mb-6">
                                    <div className="relative inline-flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg sm:h-20 sm:w-20 lg:h-24 lg:w-24">
                                      <div className="absolute inset-0 animate-pulse rounded-full bg-gradient-to-br from-blue-400 to-purple-500 opacity-50 blur-md"></div>
                                      <div className="absolute inset-0 animate-ping rounded-full border-2 border-white/30"></div>
                                      <div className="relative">
                                        <p className="animate-fade-in text-base font-bold text-white drop-shadow-lg sm:text-xl lg:text-2xl">
                                          {quizResult.summary?.percentage || 0}%
                                        </p>
                                        <p className="text-xs font-medium text-white/90 drop-shadow">
                                          Điểm số
                                        </p>
                                      </div>
                                    </div>
                                    {/* Score indicator badges */}
                                    <div className="mt-2 flex justify-center space-x-1">
                                      {(quizResult.summary?.percentage || 0) >=
                                        90 && (
                                        <span className="animate-bounce rounded-full bg-yellow-400 px-2 py-1 text-xs font-bold text-yellow-900 shadow-md">
                                          🏆 Xuất sắc
                                        </span>
                                      )}
                                      {(quizResult.summary?.percentage || 0) >=
                                        70 &&
                                        (quizResult.summary?.percentage || 0) <
                                          90 && (
                                          <span className="animate-bounce rounded-full bg-blue-400 px-2 py-1 text-xs font-bold text-blue-900 shadow-md">
                                            🌟 Tốt
                                          </span>
                                        )}
                                      {(quizResult.summary?.percentage || 0) >=
                                        50 &&
                                        (quizResult.summary?.percentage || 0) <
                                          70 && (
                                          <span className="animate-bounce rounded-full bg-green-400 px-2 py-1 text-xs font-bold text-green-900 shadow-md">
                                            👍 Khá
                                          </span>
                                        )}
                                      {(quizResult.summary?.percentage || 0) <
                                        50 && (
                                        <span className="animate-bounce rounded-full bg-orange-400 px-2 py-1 text-xs font-bold text-orange-900 shadow-md">
                                          📚 Cố gắng
                                        </span>
                                      )}
                                    </div>
                                  </div>

                                  {/* Statistics Grid */}
                                  <div className="mb-4 grid grid-cols-2 gap-2 sm:mb-6 sm:grid-cols-4 sm:gap-3">
                                    <div className="group relative transform overflow-hidden rounded-xl bg-white/80 p-3 shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-lg dark:bg-gray-800/80 dark:shadow-gray-900/50">
                                      <div className="absolute inset-0 bg-gradient-to-br from-blue-400/10 to-transparent opacity-0 transition-opacity group-hover:opacity-100"></div>
                                      <div className="relative">
                                        <div className="mb-1 flex justify-center"></div>
                                        <p className="text-center text-lg font-bold text-gray-900 dark:text-white">
                                          {quizResult.summary?.totalQuestions ||
                                            0}
                                        </p>
                                        <p className="text-center text-xs font-medium text-gray-600 dark:text-gray-400">
                                          Tổng câu
                                        </p>
                                      </div>
                                    </div>
                                    <div className="group relative transform overflow-hidden rounded-xl bg-gradient-to-br from-green-50 to-green-100 p-3 shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-lg dark:from-green-900/30 dark:to-green-800/30 dark:shadow-green-900/50">
                                      <div className="absolute inset-0 bg-gradient-to-br from-green-400/20 to-transparent opacity-0 transition-opacity group-hover:opacity-100"></div>
                                      <div className="relative">
                                        <div className="mb-1 flex justify-center"></div>
                                        <p className="text-center text-lg font-bold text-green-700 dark:text-green-300">
                                          {quizResult.summary?.correctAnswers ||
                                            0}
                                        </p>
                                        <p className="text-center text-xs font-medium text-green-600 dark:text-green-400">
                                          Đúng ✓
                                        </p>
                                      </div>
                                    </div>
                                    <div className="group relative transform overflow-hidden rounded-xl bg-gradient-to-br from-red-50 to-red-100 p-3 shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-lg dark:from-red-900/30 dark:to-red-800/30 dark:shadow-red-900/50">
                                      <div className="absolute inset-0 bg-gradient-to-br from-red-400/20 to-transparent opacity-0 transition-opacity group-hover:opacity-100"></div>
                                      <div className="relative">
                                        <div className="mb-1 flex justify-center"></div>
                                        <p className="text-center text-lg font-bold text-red-700 dark:text-red-300">
                                          {quizResult.summary
                                            ?.incorrectAnswers || 0}
                                        </p>
                                        <p className="text-center text-xs font-medium text-red-600 dark:text-red-400">
                                          Sai ✗
                                        </p>
                                      </div>
                                    </div>
                                    <div className="group relative transform overflow-hidden rounded-xl bg-gradient-to-br from-purple-50 to-purple-100 p-3 shadow-md backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-lg dark:from-purple-900/30 dark:to-purple-800/30 dark:shadow-purple-900/50">
                                      <div className="absolute inset-0 bg-gradient-to-br from-purple-400/20 to-transparent opacity-0 transition-opacity group-hover:opacity-100"></div>
                                      <div className="relative">
                                        <div className="mb-1 flex justify-center"></div>
                                        <p className="text-center text-lg font-bold text-purple-700 dark:text-purple-300">
                                          {Math.floor(
                                            (quizResult.summary?.timeSpent ||
                                              0) / 60,
                                          )}
                                          :
                                          {String(
                                            (quizResult.summary?.timeSpent ||
                                              0) % 60,
                                          ).padStart(2, "0")}
                                        </p>
                                        <p className="text-center text-xs font-medium text-purple-600 dark:text-purple-400">
                                          Thời gian ⏱
                                        </p>
                                      </div>
                                    </div>
                                  </div>

                                  {/* Performance Message */}
                                  <div className="relative overflow-hidden rounded-xl border border-white/20 bg-gradient-to-r from-white/60 to-white/40 p-3 text-center shadow-lg backdrop-blur-sm transition-all duration-500 hover:shadow-xl sm:p-4 lg:p-5 dark:border-gray-700/50 dark:from-gray-800/60 dark:to-gray-900/40">
                                    <div className="animate-gradient-shift absolute inset-0 bg-gradient-to-r from-blue-400/10 via-purple-400/10 to-pink-400/10"></div>
                                    <div className="relative">
                                      <p className="mb-1 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-sm font-bold text-transparent sm:mb-2 sm:text-base lg:text-lg">
                                        {getPerformanceMessage(
                                          quizResult.summary?.percentage || 0,
                                        )}
                                      </p>
                                      <p className="text-xs text-gray-600 italic dark:text-gray-400">
                                        &ldquo;
                                        {getPerformanceAdvice(
                                          quizResult.summary?.percentage || 0,
                                        )}
                                        &rdquo;
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}

                            {userInfo && (
                              <div className="mb-3 rounded-lg bg-gray-50 p-1.5 text-left sm:mb-6 sm:p-3 lg:mb-8 lg:p-4 dark:bg-gray-700">
                                <h3 className="mb-1 text-xs font-medium text-gray-900 sm:mb-2 sm:text-sm dark:text-white">
                                  Thông tin bài trắc nghiệm:
                                </h3>
                                <div className="space-y-0.5 text-xs text-gray-600 dark:text-gray-400">
                                  <p>
                                    <strong>Họ và tên:</strong> {userInfo.name}
                                  </p>
                                  <p>
                                    <strong>MSSV:</strong>{" "}
                                    {userInfo.studentNumber}
                                  </p>
                                  <p>
                                    <strong>Lớp:</strong> {userInfo.classNumber}
                                  </p>
                                </div>
                              </div>
                            )}

                            {/* Certificate Button Section */}
                            {quizResult &&
                              (quizResult.summary?.percentage || 0) >= 60 && (
                                <div className="mb-4 sm:mb-8">
                                  <div className="mx-auto max-w-full sm:max-w-xs">
                                    {/* Certificate button optimized for mobile */}
                                    <div className="group relative">
                                      <div className="absolute -inset-0.5 rounded-lg bg-yellow-400 opacity-75 blur transition duration-300 group-hover:opacity-100 group-hover:blur-sm"></div>
                                      <button
                                        onClick={handleViewCertificate}
                                        className="relative w-full transform rounded-lg bg-yellow-500 px-3 py-2.5 font-bold text-white shadow-lg transition-all duration-300 hover:scale-105 hover:bg-yellow-400 hover:shadow-xl focus:ring-4 focus:ring-yellow-300/50 focus:outline-none active:scale-100 sm:px-4 sm:py-3 lg:px-8 lg:py-4"
                                      >
                                        <span className="flex items-center justify-center space-x-1.5 sm:space-x-2 lg:space-x-3">
                                          <svg
                                            className="h-4 w-4 flex-shrink-0 animate-pulse sm:h-5 sm:w-6 lg:h-8 lg:w-8"
                                            fill="none"
                                            stroke="currentColor"
                                            viewBox="0 0 24 24"
                                          >
                                            <path
                                              strokeLinecap="round"
                                              strokeLinejoin="round"
                                              strokeWidth={2}
                                              d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
                                            />
                                          </svg>
                                          <span className="text-xs sm:text-sm lg:text-lg">
                                            Certificate
                                          </span>
                                        </span>
                                        {/* Badge indicator */}
                                        <div className="absolute -top-1 -right-1 animate-bounce rounded-full bg-red-500 px-1.5 py-0.5 text-xs font-bold text-white shadow-md sm:-top-1.5 sm:-right-1.5 sm:px-2 sm:py-1">
                                          🏆
                                        </div>
                                      </button>
                                    </div>

                                    {/* Congratulations subtitle */}
                                    <div className="mt-3 text-center">
                                      <p className="animate-fade-in text-sm font-medium text-gray-700 dark:text-gray-300">
                                        🎉 Chúc mừng! Bạn đã nhận được chứng
                                        nhận của mình!
                                      </p>
                                      <p className="mt-1 text-xs text-gray-600 dark:text-gray-400">
                                        Chia sẻ thành tích của bạn với người
                                        khác
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              )}

                            {/* Secondary actions */}
                            <div className="flex flex-col justify-center gap-3 sm:flex-row sm:gap-4">
                              <button
                                onClick={handleRestartQuiz}
                                className="group relative w-full transform rounded-lg bg-blue-600 px-4 py-2.5 text-xs font-medium text-white shadow-md transition-all duration-200 hover:scale-105 hover:bg-blue-700 hover:shadow-lg active:scale-100 sm:w-auto sm:px-6 sm:py-3 sm:text-sm"
                              >
                                <span className="flex items-center justify-center space-x-2">
                                  <svg
                                    className="h-4 w-4 transition-transform duration-200 group-hover:rotate-180"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                                    />
                                  </svg>
                                  <span>Làm lại bài trắc nghiệm</span>
                                </span>
                              </button>
                              <button
                                onClick={handleGoHome}
                                className="group relative w-full transform rounded-lg bg-gray-600 px-4 py-2.5 text-xs font-medium text-white shadow-md transition-all duration-200 hover:scale-105 hover:bg-gray-700 hover:shadow-lg active:scale-100 sm:w-auto sm:px-6 sm:py-3 sm:text-sm"
                              >
                                <span className="flex items-center justify-center space-x-2">
                                  <svg
                                    className="h-4 w-4 transition-transform duration-200 group-hover:translate-x-0.5"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                                    />
                                  </svg>
                                  <span>Về trang chủ</span>
                                </span>
                              </button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </SlideIn>
                  </div>
                )}
              </FadeIn>
            </div>
          </div>
        </PageTransition>
      </Layout>
    </>
  );
};

export default QuizPage;
</file>

</files>
